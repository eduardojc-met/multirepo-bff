import React, { useEffect, useState } from "react";

import Typography from "@mui/material/Typography";
import Alert from "@mui/material/Alert";
import TextField from "@mui/material/TextField";
import Paper from "@mui/material/Paper";
import Checkbox from "@mui/material/Checkbox";
import FormControlLabel from "@mui/material/FormControlLabel";
import Button from "@mui/material/Button";
import Box from "@mui/material/Box";

import ArrowBackIcon from "@mui/icons-material/ArrowBack";
import PersonIcon from "@mui/icons-material/Person";
import VisibilityIcon from "@mui/icons-material/Visibility";
import VisibilityOffIcon from "@mui/icons-material/VisibilityOff";

export type SCFDoubleStepLoginProps = {
  /**
   * Required. Callback func for the first step. You should provide
   */
  onLookup: (email: string) => any; // TODO Este return deberia ser boolean y manejado desde frontal

  /**
   * Required. Callback func for submit
   */
  onSubmit: (email: string, pwd: string, rememberMe: boolean) => void;

  /**
   * The forgotPasswordUrl of the a element. Use this prop to make url accessible for screen readers..
   */
  forgotPasswordUrl: string;

  /**
   * Check if login has auth error
   */
  loginError: boolean;

  /**
   * Set if component is rendered
   */
  show?: boolean;
  forgotPassword?: boolean;
  maxWidth?: string;
  emailInputLabel?: string;
  passwordInputLabel?: string;
  checkBoxLabel?: string;
  loginErrorLabel?: string;
  loginTitle?: string;
  loginSubtitle?: string;
  forgotText?: string;
  nextLabel?: string;
  submitLabel?: string;
  notEmailErrorLabel?: string;
};

const SCFDoubleStepLogin = ({
  onLookup,
  onSubmit,
  forgotPasswordUrl,
  forgotPassword = false,
  loginError,
  show = true,
  maxWidth = "365px",
  emailInputLabel = "Email",
  passwordInputLabel = "Password",
  checkBoxLabel = "Remember me",
  loginErrorLabel = "Failed to sign in",
  loginTitle = "Welcome",
  loginSubtitle = "Log in to get started",
  forgotText = "Forgot your password?",
  nextLabel = "Next",
  submitLabel = "Submit",
  notEmailErrorLabel = "Please indicate a valid email",
}: SCFDoubleStepLoginProps) => {
  const [isPreAuthenticated, setIsPreAuthenticated] = useState(false);
  const [pwd, setPwd] = useState("");
  const [email, setEmail] = useState("");
  const [rememberMe, setRememberMe] = useState(false);
  const [notAnEmail, setNotAnEmail] = useState(false);
  const [disabled, setDisabled] = useState(true);
  const [showPwd, setShowPwd] = useState(false);

  const emailRegex =
    /^[-\w.%+]{1,64}@(?:[A-Z0-9-]{1,63}\.){1,125}[A-Z]{2,63}$/i;

  /**
   * Gestiona el envío del formulario cuando pulsamos enter o hacemos clic en el botón de envío
   * @param {*} e
   * @param {*} FormValues Es un diccionario con los valores del formulario
   */
  const handleKeypress = (e: React.KeyboardEvent) => {
    if (e.key === "Enter") {
      handleSubmit();
    }
  };

  /**
   * Handle form submit
   */
  const handleSubmit = () => {
    if (emailRegex.test(email)) {
      if (isPreAuthenticated) {
        doSubmit(email, pwd, rememberMe);
      } else {
        doLookup(email);
      }
    }
  };

  /**
   * Return to first step
   */
  const handleBack = () => {
    setIsPreAuthenticated(false);
  };

  /**
   * Button state and error label control
   */
  useEffect(() => {
    setDisabled(!(email && emailRegex.test(email)));
    setNotAnEmail((email && !emailRegex.test(email)) === true); // prevent empty string error from regex expr.
  }, [email]);

  /**
   * Do the callback for the first check and go to second step if it's success
   * @param email
   */
  const doLookup = (email: string) => {
    setIsPreAuthenticated(onLookup(email));
  };

  /**
   * Do the callback for a regular login
   * @param email
   * @param pwd
   * @param rememberMe
   */
  const doSubmit = (email: string, pwd: string, rememberMe: boolean) => {
    onSubmit(email, pwd, rememberMe);
  };

  return (
    <>
      {show ? (
        <Paper className="loginComponent" sx={{ p: 4, maxWidth: maxWidth }}>
          <form
            onSubmit={(e) => {
              e.preventDefault();
            }}
          >
            <Typography variant="h2" mt={0}>
              {loginTitle}
            </Typography>
            <Typography variant="bodyMedium" mb={2}>
              {loginSubtitle}
            </Typography>
            {loginError && <Alert severity="error">{loginErrorLabel}</Alert>}
            {isPreAuthenticated ? (
              <Box
                sx={{
                  display: "flex",
                  justifyContent: "flex-start",
                  alignItems: "center",
                  mt: 3,
                }}
              >
                <ArrowBackIcon
                  sx={{ marginRight: 2, color: "primary", cursor: "pointer" }}
                  onClick={handleBack}
                />
                <Typography variant="bodySmall" fontWeight="bold">
                  {email}
                </Typography>
              </Box>
            ) : (
              <>
                <TextField
                  fullWidth
                  id="email"
                  label={emailInputLabel}
                  value={email}
                  variant="standard"
                  onKeyPress={handleKeypress}
                  onChange={(e) => {
                    setEmail(e.target.value);
                  }}
                  InputProps={{
                    endAdornment: <PersonIcon />,
                  }}
                />
                {notAnEmail && (
                  <Alert severity="error">
                    <strong>{notEmailErrorLabel}</strong>
                  </Alert>
                )}
              </>
            )}
            {isPreAuthenticated && (
              <TextField
                fullWidth
                id="field2"
                variant="standard"
                value={pwd}
                onChange={(e) => {
                  setPwd(e.target.value);
                }}
                label={passwordInputLabel}
                type={showPwd ? "text" : "password"}
                InputProps={{
                  endAdornment: (
                    <span onClick={() => setShowPwd(!showPwd)}>
                      {showPwd ? <VisibilityIcon /> : <VisibilityOffIcon />}
                    </span>
                  ),
                }}
              />
            )}
            <Box sx={{ my: 2, display: "flex", flexDirection: "column" }}>
              <FormControlLabel
                control={
                  <Checkbox
                    checked={rememberMe}
                    onChange={() => {
                      setRememberMe(!rememberMe);
                    }}
                  />
                }
                label={
                  <Typography variant="bodySmall" fontWeight={"bold"}>
                    {checkBoxLabel}
                  </Typography>
                }
              />
              <Box sx={{ mt: 1, mb: 2 }}>
                {forgotPassword && (
                  <a
                    href={forgotPasswordUrl}
                    style={{ textDecoration: "none" }}
                  >
                    <Typography
                      variant="bodySmall"
                      fontWeight={"bold"}
                      color="primary"
                    >
                      {forgotText}
                    </Typography>
                  </a>
                )}
              </Box>
            </Box>
            <Button
              variant="contained"
              color="primary"
              fullWidth
              disabled={disabled}
              size="large"
              onClick={handleSubmit}
              sx={{ mb: 1.5 }}
            >
              {isPreAuthenticated ? (
                <span>{submitLabel}</span>
              ) : (
                <span>{nextLabel}</span>
              )}
            </Button>
          </form>
        </Paper>
      ) : null}
    </>
  );
};

export default SCFDoubleStepLogin;
