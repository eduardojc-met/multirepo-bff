import React from "react";
import Tab, { TabProps } from "@mui/material/Tab";
import Tabs from "@mui/material/Tabs";
import { Box } from "@mui/material";
import Typography from "@mui/material/Typography";

interface TabPanelProps {
  children?: React.ReactNode;
  index: number;
  value: number;
}

type TabConfig = {
  title: string;
  content: React.ReactNode;
}

export const TabPanel = (props: TabPanelProps) => {
  const { children, value, index, ...other } = props;

  return (
    <div
      role="tabpanel"
      hidden={value !== index}
      id={`scrollable-auto-tabpanel-${index}`}
      aria-labelledby={`scrollable-auto-tab-${index}`}
      {...other}
    >
      {value === index && (
        <Box sx={{ p: 3 }}>
          <Typography>{children}</Typography>
        </Box>
      )}
    </div>
  );
};

export const a11yProps = (index: number) => {
  return {
    id: `scrollable-auto-tab-${index}`,
    "aria-controls": `scrollable-auto-tabpanel-${index}`,
  };
};

type SCFTabProps = TabProps & {
  /**
   * Controls if the component must be rendered
   */
  show?: boolean;
  textColor?: "inherit" | "primary" | "secondary";
  indicatorColor?: "primary" | "secondary";
  pages?: TabConfig[];
};
const SCFTab = ({
  show = true,
  textColor = "inherit",
  indicatorColor = "primary",
  pages = [{ title: "Tab1", content: "Tab 1 content" },{ title: "Tab2", content: "Tab 2 content"}],
}: SCFTabProps) => {

  const [value, setValue] = React.useState(0);
  const handleChange = (event: any, newValue: any) => {
    console.warn(event); // TODO solucionar para quitar
    setValue(newValue);
  };

  return (
    <>
      {show && (
        <>
        <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>
          <Tabs
            onChange={handleChange}
            textColor={textColor}
            indicatorColor={indicatorColor}
            value={value}
          >
            {pages.map((tabconfig: TabConfig, index: number) => {
              return <Tab key={index} label={tabconfig.title} {...a11yProps(index)} />;
            })}
          </Tabs>
        </Box>
          {pages.map((tabconfig: TabConfig, index: number) => {
            return (
              <TabPanel key={index} value={value} index={index}>
                {tabconfig.content}
              </TabPanel>
            );
          })}
        </>
      )}
    </>
  );
};

export default SCFTab;
