import React, { useEffect, useState } from "react";
import Table, { TableProps } from "@mui/material/Table";
import TableBody from "@mui/material/TableBody";
import TableCell from "@mui/material/TableCell";
import TableContainer from "@mui/material/TableContainer";
import TablePagination from "@mui/material/TablePagination";
import TableHead from "@mui/material/TableHead";
import TableRow from "@mui/material/TableRow";
import Paper from "@mui/material/Paper";
import EditIcon from "@mui/icons-material/Edit";
import DeleteIcon from "@mui/icons-material/Delete";
import { Box } from "@mui/system";
import { StyledTableCell } from "./BasicTableStyle";
import Typography from "@mui/material/Typography";
import IconButton from "@mui/material/IconButton";

import VisibilityIcon from "@mui/icons-material/Visibility";
import PowerSettingsNewIcon from "@mui/icons-material/PowerSettingsNew";
import AddCircleIcon from "@mui/icons-material/AddCircle";
import Chip from "@mui/material/Chip";

export type SCFBasicTableProps = TableProps & {
  /**
   * Controls if the component must be rendered
   */
  show?: boolean;
  arrayHeader: string[];
  arrayBody: any[];
  width?: string | any;
  editable?: boolean;
  deletable?: boolean;
  details?: boolean;
  inactive?: boolean;
  tableTitle?: string;
  actionLabel?: string;
  action?: boolean;
  stickyHeader?: boolean;
  handleDelete?: (row: any) => void;
  handleEdit?: (row: any) => void;
  handleDetails?: (row: any) => void;
  handleAdd?: () => void;
  handleActive?: (row: any) => void;
  add?: boolean;
  labelRowsPerPage?: string;
};
export const SCFBasicTable = ({
  show = true,
  arrayHeader,
  arrayBody,
  width = "100%",
  tableTitle = "Table title",
  actionLabel = "Action",
  stickyHeader = true,
  handleActive = undefined,
  handleDetails = undefined,
  handleDelete = undefined,
  handleEdit = undefined,
  handleAdd = undefined,
  add = true,
  labelRowsPerPage = 'PÃ¡ginas',


  ...muiprops
}: SCFBasicTableProps) => {
  const [page, setPage] = useState(0);
  const [rowsPerPage, setRowsPerPage] = useState(4);

  const handleChangePage = (
    event: React.MouseEvent<HTMLButtonElement>,
    newPage: number
  ) => {
    event.preventDefault();
    setPage(newPage);
  };

  const handleChangeRowsPerPage = (
    event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>
  ) => {
    setRowsPerPage(+event.target.value);
    setPage(0);
  };
  useEffect (()=> {
    setPage(0)
  },[arrayBody])
  return (
    <>
      {show && (
        <Paper {...muiprops}>
          <Box
            sx={{
              display: "flex",
              justifyContent: "space-between",
              alignItems: "center",
              alignContent: "center",
              padding: "12px",
              backgroundColor: "white",
            }}
          >
            <Typography variant="h4"> {tableTitle}</Typography>
            { add &&
            (<IconButton onClick={handleAdd}>
              <AddCircleIcon color="primary" sx={{ fontSize: 40 }} />
            </IconButton>)
            }
          </Box>
          <TableContainer sx={{ maxHeight: 400 }}>
            <Table
              stickyHeader
              sx={{ minWidth: 700 }}
              aria-label="customized table, sticky table"
              width={width}
              {...muiprops}
            >
              <TableHead>
                <TableRow>
                  {arrayHeader.map((name: string, index: number) => {
                    return (
                      <StyledTableCell key={index}>{name}</StyledTableCell>
                    );
                  })}
                </TableRow>
              </TableHead>
              <TableBody>
                {arrayBody
                  .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)
                  .map((row: any, index: number) => {
                    const arrayActions = row && row?.actions;
                    const details = arrayActions && arrayActions.includes('details');
                    const editable= arrayActions && arrayActions.includes('editable');
                    const reactive= arrayActions && arrayActions.includes('reactive');
                    const deletable = arrayActions && arrayActions.includes('deletable');
                    return (                     
                        <TableRow key={index}>
                          {Object.entries(row).map(([key, value]:[string, any], index:number) => {
                            const active = key === "status" && value && value  === 'A';
                            const inactive = key === "status" && value && value === 'I';
                            const inAction = Array.isArray(value);
                            const isStatus = key === "status" && (value === 'I' || value === 'A') ? true : false;
                            return (
                              <>
                                { !inAction && 
                                  <TableCell
                                    sx={{ textAlign: "center" }}
                                    key={`${index}_${key}`}
                                  >
                                    {active &&
                                        <Chip
                                          label="Active"
                                          sx={{
                                            border: "1px solid #63ba68",
                                            backgroundColor: "#E0F2E1",
                                          }}
                                        />
                                    }
                                    {
                                      inactive &&                                    
                                        <Chip
                                          label="Inactive"
                                          sx={{
                                            border: "1px solid #cc0000",
                                            backgroundColor: "#FCCCCC",
                                          }}
                                        />
                                    }
                                    {
                                      !inAction && !isStatus && 
                                        <span style={{ textAlign: "center" }}>
                                          {value}
                                        </span>
                                    }                                 
                                  </TableCell>
                                }
                              </>
                            );
                          })}
                          {
                            <TableCell sx={{ textAlign: "center" }} key={index}>
                              {details && (
                                <IconButton
                                onClick={
                                  handleDetails
                                  ? () => {
                                    handleDetails(row);
                                        }
                                      : undefined
                                  }
                                >
                                  <VisibilityIcon />
                                </IconButton>
                              )}
                              {editable && (
                                <IconButton
                                  onClick={
                                    handleEdit
                                      ? () => {
                                          handleEdit(row);
                                        }
                                        : undefined
                                      }
                                      >
                                  <EditIcon />
                                </IconButton>
                              )}
                              {deletable && (
                                <IconButton
                                  onClick={
                                    handleDelete
                                      ? () => {
                                          handleDelete(row);
                                        }
                                      : undefined
                                    }
                                    >
                                  <DeleteIcon />
                                </IconButton>
                              )}
                              {reactive && (
                                <IconButton
                                  onClick={
                                    handleActive
                                      ? () => {
                                          handleActive(row);
                                        } 
                                      : undefined
                                  }
                                >
                                  <PowerSettingsNewIcon />
                                </IconButton>
                              )}
                            </TableCell>
                          }
                        </TableRow>
                    );
                  })}
              </TableBody>
            </Table>
          </TableContainer>
          <TablePagination
            rowsPerPageOptions={[4, 5, 10, 25, 100]}
            component="div"
            count={arrayBody.length}
            rowsPerPage={rowsPerPage}
            page={page}
            onPageChange={handleChangePage}
            labelRowsPerPage = {labelRowsPerPage}
            onRowsPerPageChange={handleChangeRowsPerPage}
            sx={{ position: "sticky" }}
          />
        </Paper>
      )}
    </>
  );
};

export default SCFBasicTable;
