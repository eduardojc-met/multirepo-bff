import { Paper, PaperProps, Stack, Typography } from "@mui/material";
import React, { FormEvent, useEffect, useState } from "react";
import { RegisterOptions, useForm } from "react-hook-form";
import SCFAlert from "../SCFAlert/SCFAlert";
import SCFButton from "../SCFButton/SCFButton";
import SCFPassword from "../SCFPassword/SCFPassword";

type ValidationMessages = {
    required: string,
    min: string,
    max: string,
    pattern: string
 }

interface DataType extends FormEvent<HTMLDivElement> {
    password: string, 
    newPassword: string, 
    newPasswordConfirm: string 
 };
export type SCFChangePasswordFormProps = PaperProps & {
    /**
   * Set if component is rendered
   */
  show?: boolean;
  /**
   * set the component type, if the type is change, 3 inputs will be rendered (actual password,  new password and confirmation), 
   * if the type is new, 2.
   */
  type: 'new'|'change';
  onSubmit: (data:DataType) => void;
  maxWidth?: string;
  currentPassword?: string;
  currentPasswordLabel?: string;
  serverError?:boolean;
  serverErrorLabel?:string;
  newPasswordLabel?: string;
  newPasswordConfirmationLabel?: string;
  submitLabel?:string;
  currentPasswordError?: string;
  newPasswordConfirmationErrorLabel?: string;
  similarityValidation?: string;
  newPasswordValidationMessages?: ValidationMessages;
  /**
   * the similarity Ratio: password/newPassword if the similarity value is 1, is the same string
   */
  similarityRatio?: number;
  newPasswordValidation?: RegisterOptions;
};

export const SCFChangePasswordForm = ({
    show = true,
    type = 'new',
    onSubmit ,
    maxWidth = "340px",
    currentPassword= '',
    currentPasswordLabel= 'Current password',
    serverError = false,
    serverErrorLabel = 'Please, try another password',
    newPasswordLabel= 'New password',
    newPasswordConfirmationLabel= 'New password confirmation',
    submitLabel= 'Submit',
    currentPasswordError = 'Wrong password',
    newPasswordConfirmationErrorLabel = 'The password and its confirmation do not match',
    similarityValidation = 'The password and new password are too similar, please introduce another one',
    similarityRatio = 0.7,
    newPasswordValidationMessages,
    ...propsMaterial
}: SCFChangePasswordFormProps) => {
    
    const [ showChangePassword, setShowChangePassword ] = useState(false);
    const { register, handleSubmit, formState: { errors }, trigger } = useForm({mode: "onSubmit"});
    const [ validateCurrentPassword, setValidateCurrentPassword ] = useState(false);
    const [ validateNewPassword, setValidateNewPassword ] = useState (false);
    const [ validateSimilarity, setValidateSimilarity ] = useState (false);

    const stringSimilarity = require("string-similarity");    
    
    const compareNewPassword = (data:DataType) => {
        if (data.newPassword === data.newPasswordConfirm){
                onSubmit(data)
                setValidateNewPassword(false)
            } else {
                setValidateNewPassword(true)
            }
        }       
    const handleRegistration = ( data:DataType) => {
        if (showChangePassword) {
            if (currentPassword&& currentPassword!==data.password){
                setValidateCurrentPassword(true) 
            } else {
                const similarity = stringSimilarity.compareTwoStrings(data.password, data.newPassword)
                setValidateCurrentPassword(false)
                if (similarity <= similarityRatio){
                    setValidateSimilarity(false)
                    compareNewPassword(data)
                } else {
                    setValidateSimilarity(true)
                }
            }
        } else {
            compareNewPassword(data) 
        }
    };

    useEffect(() => {
      if(Object.keys(errors).length !== 0){
        trigger();
      }
    }, [newPasswordValidationMessages]);

    useEffect(() => {
        if (type === 'change'){
            setShowChangePassword(true);
        }  
    }, [type]);

    const registerO : RegisterOptions = {
      required: newPasswordValidationMessages!.required,
      minLength: {
        value: 8,
        message: newPasswordValidationMessages!.min
      },
      maxLength: {
        value: 64,
        message: newPasswordValidationMessages!.max
      },
      pattern: {
        value: /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[$@$!%*?&])[A-Za-z\d$@$!%*?&]/,
        message: newPasswordValidationMessages!.pattern
      }
    }
    
    return (
        <>
            { show && (
                <Paper sx={{ p: 4, maxWidth: maxWidth }} {...propsMaterial}>
                    <form onSubmit={handleSubmit(handleRegistration)}>
                        <Stack spacing={2} direction="column">
                            { showChangePassword && (
                                <>                             
                                    <SCFPassword
                                        name="password"
                                        variant='standard'
                                        label={currentPasswordLabel}
                                        newPasswordValidation = {{...register('password', { required:  newPasswordValidationMessages!.required })}}                             
                                    /> 
                                    <Typography variant='bodySmall' mb={2} color='primary'>
                                        {errors?.password && errors.password.message}
                                    </Typography>                                
                                </>  
                            )}
                            <SCFPassword
                                newPasswordValidation = {{...register('newPassword', registerO)}}
                                name="newPassword"
                                variant='standard'
                                label={newPasswordLabel}
                            /> 
                            <Typography variant='bodySmall' mb={2} color='primary'>
                                {errors?.newPassword && errors.newPassword.message}
                            </Typography>
                            <SCFPassword
                                newPasswordValidation = {{...register('newPasswordConfirm', { required: newPasswordValidationMessages!.required })}}
                                name="newPasswordConfirm"
                                variant='standard'
                                label={newPasswordConfirmationLabel}
                            /> 
                            <Typography variant='bodySmall' mb={2} color='primary'>
                                {errors?.newPasswordConfirm && errors.newPasswordConfirm.message}
                            </Typography>
                            { serverError && (
                                <SCFAlert severity= "error"
                                    children= {serverErrorLabel}/>
                            )}
                            { validateCurrentPassword && (
                                <SCFAlert severity= "error"
                                children= {currentPasswordError}/>
                            )}
                            { validateNewPassword && (
                                <SCFAlert severity= "error"
                                children= {newPasswordConfirmationErrorLabel}/>
                            )}
                            { validateSimilarity && (
                                <SCFAlert severity= "error"
                                children= {similarityValidation}/>
                            )}
                            <SCFButton variant='contained' color='primary'  type="submit">
                                {submitLabel}
                            </SCFButton>                                                 
                        </Stack>
                    </form>
                </Paper>
            )}
        </>
    )
}

SCFChangePasswordForm.defaultProps = {
    newPasswordValidationMessages: {
        required:'Password is required',
        min:'Password must have at least 8 characters',
        max:"Password can't be longer than 64 characters", 
        pattern: 'The password must contains at least one uppercase one lowercase one number and one special case character'
    }
}
