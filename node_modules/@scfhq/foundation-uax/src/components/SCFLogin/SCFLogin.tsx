import React, { useEffect, useState } from "react";
import { AxiosResponse } from "axios";
import ReCAPTCHA from "react-google-recaptcha";

import Typography from "@mui/material/Typography";
import Alert from "@mui/material/Alert";
import TextField from "@mui/material/TextField";
import Paper from "@mui/material/Paper";
import Checkbox from "@mui/material/Checkbox";
import FormControlLabel from "@mui/material/FormControlLabel";
import Button from "@mui/material/Button";
import Box from "@mui/material/Box";

import PersonIcon from "@mui/icons-material/Person";
import VisibilityIcon from '@mui/icons-material/Visibility';
import VisibilityOffIcon from '@mui/icons-material/VisibilityOff';
import Link from "@mui/material/Link";


export type SCFLoginProps = {
  /**
   * Required. Callback func for submit
   */
  onSubmit: (email: string, pwd: string, rememberMe: boolean) => void;

  /**
   * Check if login has auth error
   */
  loginError: boolean;

  /**
   * Set if component is rendered
   */
  show?: boolean;
  maxWidth?: string;
  userInputLabel?: string;
  passwordInputLabel?: string;
  checkBoxLabel?: string;
  loginErrorLabel?: string;
  loginTitle?: string;
  loginSubtitle?: string;
  forgotText?: string;
  submitLabel?: string;
  recaptcha?: boolean;
  apiUrl?:string;
  siteKey?: string;
   /**
   * The forgotPassword of the a element. Use this prop to make url accessible for screen readers..
   */
  forgotPassword?: string | (() => void);
  evaluateRecaptchaToken?: ( token :string, apiUrl: string) => Promise<AxiosResponse<boolean>>;
  rememberMe?: boolean;
};

const SCFLogin = ({
  onSubmit,
  forgotPassword = undefined,
  loginError,
  show = true,
  maxWidth = "365px",
  userInputLabel = "Username",
  passwordInputLabel = "Password",
  checkBoxLabel = "Remember me",
  loginErrorLabel = "Failed to sign in",
  loginTitle = "Welcome",
  loginSubtitle = "Log in to get started",
  forgotText = "Forgot your password?",
  submitLabel = "Submit",
  evaluateRecaptchaToken = undefined,  /**
   * set if reCAPTCHA component is rendered or not 
   */
  recaptcha= false,
  /** siteKey es la key necesaria para la Api de google reCaptcha, y la apiUrl el token de back, son pasados por props,
   * para que cada proyecto las pase de forma dinámica. Son opcionales.
   */
  apiUrl = ' ',
  siteKey = ' ',
  rememberMe = true


}: SCFLoginProps) => {
  const [pwd, setPwd] = useState("");
  const [user, setUser] = useState("");
  const [rememberMeOption, setRememberMeOption] = useState(false);
  const [disabled, setDisabled] = useState(true);
  const [showPwd, setShowPwd] = useState(false);
  const [noRobot, setNoRobot] = useState(false);
  const [captchaCheck, setCaptchaCheck] = useState(false);

  const [forgotPassordProps, setforgotPassordProps] = useState({});
  
  const getTokenEvaluation =  (token: string) => {
    if (evaluateRecaptchaToken) {
      evaluateRecaptchaToken(token, apiUrl)
      .then(resp => {
        const captcha= resp.data;
        setNoRobot(captcha);
        setCaptchaCheck(true);
      })
    }
  };

  /**
   * Gestiona el envío del formulario cuando pulsamos enter o hacemos clic en el botón de envío
   * @param {*} e
   * @param {*} FormValues Es un diccionario con los valores del formulario
   */
  const handleKeypress = (e: React.KeyboardEvent) => {
    if (e.key === "Enter") {
      handleSubmit();
    }
  };

  /**
   * Handle form submit
   */
  const handleSubmit = () => {
    doSubmit(user, pwd, rememberMeOption);
  };
  // const  handleCaptcha = (value:any) => getTokenEvaluation(value);
  const handleCaptchaWhenLogin = () => {
    if(recaptcha){
      noRobot ? handleSubmit() : null
    } else {
      handleSubmit()
    }
  } 

  /**
   * Button state and error label control
   */
  useEffect(() => {
    if (recaptcha){
      if(captchaCheck){
        setDisabled(false)
        setDisabled(!user || !pwd );
      } else{
        setDisabled(true)
      }
    } else {
      setDisabled(!user || !pwd)
    }
  }, [user, pwd, captchaCheck]);

  /**
   * Do the callback for a regular login
   * @param user
   * @param pwd
   * @param rememberMe
   */
  const doSubmit = (user: string, pwd: string, rememberMe: boolean) => {
    onSubmit(user, pwd, rememberMe);
  };

  useEffect(() => {
    if (typeof forgotPassword === 'string'){
      setforgotPassordProps({ href: forgotPassword});
    } else {
      setforgotPassordProps({ href: '#', onClick: forgotPassword});
    }
  }, []);

  useEffect( () => {
    setRememberMeOption(rememberMe);
  }, [])

  return (
    <>
      {show ? (
        <Paper className="loginComponent" sx={{ p: 4, maxWidth: maxWidth }}>
          <form>
            <Typography variant="h2" mt={0}>
              {loginTitle}
            </Typography>
            <Typography variant="bodyMedium" mb={2}>
              {loginSubtitle}
            </Typography>
            {loginError && <Alert severity="error">{loginErrorLabel}</Alert>}
            <TextField
              fullWidth
              id="user"
              label={userInputLabel}
              value={user}
              variant="standard"
              onKeyPress={handleKeypress}
              onChange={(e) => {
                setUser(e.target.value);
              }}
              InputProps={{
                endAdornment: <PersonIcon />,
              }}
            />
            <TextField
              fullWidth
              id="field2"
              variant="standard"
              value={pwd}
              onChange={(e) => {
                setPwd(e.target.value);
              }}
              label={passwordInputLabel}
              type={showPwd ? "text" : "password"}
              InputProps={{
                endAdornment: (
                  <span onClick={() => setShowPwd(!showPwd)}>
                    {showPwd ? <VisibilityIcon /> : <VisibilityOffIcon />}
                  </span>
                ),
              }}
            />
            <Box sx={{ my: 2, display: "flex", flexDirection: "column" }}>
              {rememberMe && (
                <FormControlLabel
                  control={
                    <Checkbox
                      checked={rememberMeOption}
                      onChange={() => {
                        setRememberMeOption(!rememberMeOption);
                      }}
                    />
                  }
                  label={
                    <Typography variant="bodySmall" fontWeight={"bold"}>
                      {checkBoxLabel}
                    </Typography>
                  }
                />
              )}
              {forgotPassword && (
                <Box sx={{ mt: 1, mb: 2 }}>
                    <Link {...forgotPassordProps} style={{ textDecoration: "none" }} >
                      <Typography
                        variant="bodySmall"
                        fontWeight={"bold"}
                        color="primary"
                      >
                        {forgotText}
                      </Typography>
                    </Link>
                </Box>
              )}
            </Box>
            <Box  sx={{ display: "flex", justifyContent: "center",  mt: 1, mb: 2}}>
                <Button
                  variant="contained"
                  color="primary"
                  fullWidth
                  disabled={disabled}
                  size="large"
                  onClick={handleCaptchaWhenLogin}
                >
                  <span>{submitLabel}</span>
                </Button>
            </Box> 
            {recaptcha && evaluateRecaptchaToken &&
              <Box  sx={{ display: "flex", justifyContent: "center",  pt: 2, mb: 1.5 }}>
                <ReCAPTCHA
                  sitekey= { siteKey}
                  onChange={getTokenEvaluation}
                />
              </Box> 
            }             
          </form>
        </Paper>
      ) : null}
    </>
  );
};

export default SCFLogin;
