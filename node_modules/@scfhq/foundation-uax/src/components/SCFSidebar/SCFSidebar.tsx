import React from "react";
import { BrowserRouter, NavLink } from 'react-router-dom';
import { makeStyles } from "@mui/styles";
import SCFIcon from "../SCFIcon/SCFIcon";

export type LinkType = {
    to: string;
    icon?: string;
    text: React.ReactNode;
    submenus?: LinkType[];
  };

const useStyles = makeStyles(() => ({
    dialogTitle: {
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      margin: "10px"
    },
    dialogMargins: {
      margin: "10px"
    },
    sidebar : {
        position: 'fixed',
        left: '0',
        top: '65px',
        height: '100%',
        width: '78px',
        background: '#EFF6F9',
        padding: '6px 0px 0 0',
        'z-index': '990',
        transition: 'all 0.5s ease',
        '& i': {
            color: '#fff',
            height: '60px',
            'min-width': '50px',
            'font-size': '28px',
            'text-align': 'center',
            'line-height': '60px',
        },
        '& li': {
            position: 'relative',
            margin: '0px 0',
            'list-style': 'none',
            height: '70px',
            '& .tooltip': {
                position: 'absolute',
                top: '-20px',
                left: 'calc(100% + 15px)',
                'z-index': '3',
                background: '#fff',
                'box-shadow': '0 5px 10px rgba(0, 0, 0, 0.3)',
                padding: '6px 12px',
                'border-radius': '4px',
                'font-size': '15px',
                'font-weight': '400',
                opacity: '0',
                'pointer-events': 'none',
                transition: '0s',
            },
            '&:hover .tooltip': {
                opacity: '1',
                'pointer-events': 'auto',
                transition: 'all 0.4s ease',
                top: '50%',
                transform: 'translateY(-50%)',
            },
            '& a': {
                display: 'flex',
                height: '100%',
                width: '100%',
                'border-radius': '0',
                'align-items': 'center',
                'text-decoration': 'none',
                transition: 'all 0.4s ease',
                background: 'transparent',
                'border-left': '6px solid transparent',
                '& .links_name': {
                    color: '#EC0000',
                    'font-size': '15px',
                    'font-weight': '400',
                    'white-space': 'nowrap',
                    opacity: '0',
                    'pointer-events': 'none',
                    transition: '0.4s',
                }
            },
            '& a:hover': {
                background: '#fff',
                '& .links_name': {
                    transition: 'all 0.5s ease',
                    /* color: #11101d; */
                },
                '& i': {
                    transition: 'all 0.5s ease',
                    /*  color: #11101d; */
                }
            }
        }
    },
    nav_list: {
        'margin-top': '10px',
        height: '100%',
        'padding-left': '0',
    },
    open: {
        width: '250px',
        '& li .tooltip': {
            display: 'none',
        }
    },
    links_name_open: {
        opacity: '1 !important',
        'pointer-events': 'auto !important',
        padding: '0 15px',
        'font-size': '18px !important',
    },
    routeSelected: {
        'border-left': '6px solid #444444 !important',
        color: '#444444',
        '& i': {
            color: '#444444 !important'
        },        
        '&>.links_name': {
            color: '#444444 !important'
        }
    },
    icon: {
        'margin-left': '10px',
        '& i': {
            color: '#EC0000',
            'font-size': '25px !important'
           /*  margin-left: 20px; */
        }
    }
  }));
 type SCFSidebarProps = {
    show?: boolean;
    open: boolean;
    links: LinkType[];
 };
 const SCFSidebar = ({
    show = true,
    open = false,
    links = [{to: './', icon: 'fas fa-hand-holding-usd',text: 'test Icon'}], 
 }: SCFSidebarProps) => {
    const classes = useStyles();

    const renderLink = (link:LinkType) => (
        <li>
            <NavLink to={link.to} activeClassName={classes.routeSelected}>
                {link.icon  && <SCFIcon 
                    className={classes.icon}
                    icon={link.icon}
                />}
                <span className={'links_name ' + (open ? classes.links_name_open : '')}>{link.text}</span>
            </NavLink>
            <span className="tooltip">{link.text}</span>
        </li>
    );

    return (
        <>
            { show && (
                <BrowserRouter>
                    <div className={classes.sidebar + ' ' + (open ? classes.open : '')}>
                        <ul className={classes.nav_list}>
                            {links.map((link:LinkType, index:number)=>{
                                return (link.to ? (renderLink(link)) : (
                                    <li key={index}>
                                        <span>
                                            {link.icon  && <SCFIcon 
                                                className={classes.icon}
                                                icon={link.icon}
                                            />}
                                            <span className={"links_name" + ' ' + (open ? classes.links_name_open : '')}>{link.text}</span>
                                        </span>
                                        <span className="tooltip">{link.text}</span>
                                        { link.submenus && ( 
                                            link.submenus.map((submenu:LinkType, indexSubmenu:number) => {
                                                return(
                                                    <ul key={indexSubmenu}>
                                                        {submenu}
                                                    </ul>
                                                )
                                            })
                                        )}   
                                    </li>
                                ))
                            })}
                        </ul>
                    </div>
                </BrowserRouter>
            )}
        </>
    )
}

export default SCFSidebar;