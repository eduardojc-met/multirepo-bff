import React from "react";
import Dialog, { DialogProps } from "@mui/material/Dialog";

import IconButton from "@mui/material/IconButton";
import DialogTitle from "@mui/material/DialogTitle";
import DialogContent from "@mui/material/DialogContent";
import DialogActions from "@mui/material/DialogActions";

import SCFButton from "../SCFButton/SCFButton";

import CloseIcon from "@mui/icons-material/Close";

export type ActionButton = {
  title: string;
  onClick: () => void;
  /**
   * TODO Restringir a los tipos permitidos por MUI
   */
  variant: "text" | "outlined" | "contained" | undefined;
};

export interface SCFDialogProps extends Omit<DialogProps, "title"> {
  /**
   * Controls if the component must be rendered
   */
  show?: boolean;
  title?: React.ReactNode | JSX.Element;
  actionButtons?: ActionButton[];
  actionsClassName?: string;
  content?: React.ReactNode;
  onClose?: () => void;
  /**
   * @deprecated Use actionButtons instead
   */
  buttons?: any[];
}

const SCFDialog = ({
  show = true,
  title = undefined,
  actionsClassName,
  content = undefined,
  actionButtons = undefined,
  buttons = undefined,
  onClose = undefined,
  ...muiprops
}: SCFDialogProps) => {
  
  /**
   * Esto es para darle soporte a la prop buttons, deprecada.
   * TODO: Adaptar cuando se quite la prop button.
   */
  const actions = actionButtons ? actionButtons : buttons;

  return (
    <>
      {show && (
        <Dialog {...muiprops}>
          <DialogTitle sx={{p:4}}>
          {title}
          {onClose && (
            <IconButton
              aria-label="close"
              onClick={onClose}
              sx={{
                position: 'absolute',
                right: 16,
                top: 12,
              }}
            >
              <CloseIcon />
            </IconButton>
          ) }
          </DialogTitle>
          <DialogContent sx={{ px: 4, pb: actions ? 2 : 4  }}>{content}</DialogContent>
          {actions && actions.length > 0 && (
            <DialogActions sx={{px: 4, pb: 2}}>
              {actions.map((button: ActionButton, index: number) => {
                return (
                  <SCFButton
                    key={index}
                    variant={button.variant}
                    onClick={button.onClick}
                    color="primary"
                  >
                    {button.title}
                  </SCFButton>
                );
              })}
            </DialogActions>
          )}
        </Dialog>
      )}
    </>
  );
};

export default SCFDialog;
