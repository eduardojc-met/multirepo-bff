import React from "react";
import TextField, {TextFieldProps } from "@mui/material/TextField";
import { Controller, RegisterOptions, UseFormReturn } from "react-hook-form";


type SCFInputProps = TextFieldProps & {
  /**
   * Controls if the component must be rendered
   */
  show?: boolean;
  /**
   * React-hook form. If defined, the component will render a React-hook form controller.
   */
  form?: UseFormReturn;
  /**
   * React-hook-forms rules.
   */
  rules?: Omit<RegisterOptions, 'valueAsNumber' | 'valueAsDate' | 'setValueAs' | 'disabled'>;
  onChange?: (event: React.ChangeEvent<HTMLInputElement>) => any;
};

const SCFInput= ({
  show = true,
  onChange = undefined,
  form = undefined,
  ...muiAndControllerProps}: SCFInputProps) => {

  const handleChange = ( event: React.ChangeEvent<HTMLInputElement>) => {
    // Set react hook form only if form and name are defined
    if (form && muiAndControllerProps.name) {
      form.setValue(muiAndControllerProps.name, event.target.value, {shouldValidate:(form && form.formState && form.formState.isSubmitted)})
    }
    // Launch regular onChange event
    onChange ? onChange(event): null;
  }

  return (
    <>
      { show && (
        (form && muiAndControllerProps.name) ? (
          <Controller
            name={muiAndControllerProps.name}
            control={form.control}
            rules={muiAndControllerProps.rules}
            render={() => (
              <TextField {...muiAndControllerProps} onChange={handleChange} error={ muiAndControllerProps.error}/>
            )}
          />) 
        : (
          <TextField {...muiAndControllerProps} onChange={handleChange} />
          )
      )}</>
  );
};

export default SCFInput;