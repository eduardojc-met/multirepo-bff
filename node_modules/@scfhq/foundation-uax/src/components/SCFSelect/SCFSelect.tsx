import React, { useEffect, useState } from "react";
import Select, { SelectChangeEvent, SelectProps } from "@mui/material/Select";
import { FormControl, InputLabel, MenuItem } from "@mui/material";
import { SxProps, Theme } from "@mui/material/styles";

type selectOption = {
  name: string;
  /**
   * TODO tipar adecuadamente. Quiza hay que permitir T
   */
  value: any;
};

interface SCFSelectProps extends Omit<SelectProps, "onChange"> {
  /**
   * Controls if the component must be rendered
   */
  show?: boolean;
  /**
   * Can create options dinamically. Each option is an seletOption type object, like {name: 'Castellano', value: 'CAS'}
   */
  options?: selectOption[];
  required?: boolean;
  label?: string | JSX.Element;
  inputLabel?: boolean;
  sx?: SxProps<Theme>;
  onChange?: (event: any) => any;
}

const SCFSelect = ({
  show = true,
  options = [],
  required = false,
  label = "Choose an option",
  inputLabel = false,
  sx = [],
  onChange,
  ...muiprops
}: SCFSelectProps) => {
  const [value, setValue] = useState("");

  const handleChange = (event: SelectChangeEvent) => {
    setValue(event.target.value);
    onChange ? onChange(event) : null;
  };

  /**
   * Set initial value. Takes care about value type and only accepts strings.
   */
  useEffect(() => {
    setValue(typeof muiprops.value === "string" ? muiprops.value : "");
  });

  return (
    <>
      {show && (
        <FormControl
          required={required}
          // You cannot spread `sx` directly because `SxProps` (typeof sx) can be an array.
          sx={[...(Array.isArray(sx) ? sx : [sx])]}
        >
          {label && <InputLabel id={`${muiprops.id}-label`}> {label} </InputLabel>}
          <Select
            labelId={`${muiprops.id}-label`}
            label={label}
            {...muiprops}
            onChange={handleChange}
            value={value}
            name={muiprops.name}
          >
            {options.map((option, index) => {
              return (
                <MenuItem key={index} value={option.value}>
                  {option.name}
                </MenuItem>
              );
            })}
          </Select>
        </FormControl>
      )}
    </>
  );
};

export default SCFSelect;
