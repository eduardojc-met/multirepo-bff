import * as React from 'react';
import MuiDrawer, { DrawerProps } from '@mui/material/Drawer';
import List from '@mui/material/List';
import ListItemText from '@mui/material/ListItemText';
import ListItemButton from '@mui/material/ListItemButton';
import ExpandLess from '@mui/icons-material/ExpandLess';
import ExpandMore from '@mui/icons-material/ExpandMore';
import Collapse from '@mui/material/Collapse';
import { styled } from '@mui/material/styles';
import { CSSObject, Theme } from '@mui/material';
import { arrayMenuData } from './CustomMiniDrawerData';
import { SCFCustomIcon } from '../SCFCustomIcon/SCFCustomIcon';


const drawerWidth = 'auto';
interface CustomDrawerDataTypeI {
  title: string,
  path: string,
  icon?: string,
  subNav?: CustomDrawerDataTypeI[]
};

const openedMixin = (theme: Theme) : CSSObject => ({
  width: drawerWidth,
  transition: theme.transitions.create('width', {
    easing: theme.transitions.easing.sharp,
    duration: theme.transitions.duration.enteringScreen,
  }),
  overflowX: 'hidden',
});

const closedMixin = (theme: Theme): CSSObject => ({
  transition: theme.transitions.create('width', {
    easing: theme.transitions.easing.sharp,
    duration: theme.transitions.duration.leavingScreen,
  }),
  overflowX: 'hidden',
  width: `calc(${theme.spacing(7)} + 1px)`,
  [theme.breakpoints.up('sm')]: {
    width: `calc(${theme.spacing(8)} + 1px)`,
  },
});
const Drawer = styled(MuiDrawer, { shouldForwardProp: (prop) => prop !== 'open' })(
  ({ theme, open }) => ({
    width: drawerWidth,
    flexShrink: 0,
    whiteSpace: 'nowrap',
    boxSizing: 'border-box',
    ...(open && {
      ...openedMixin(theme),
      '& .MuiDrawer-paper': openedMixin(theme),
    }),
    ...(!open && {
      ...closedMixin(theme),
      '& .MuiDrawer-paper': closedMixin(theme),
    }),
  }),
);

export type SCFCustomMiniDrawerProps = DrawerProps & {
  show?: boolean;
  /**
   * TODO: Tipar el arrayMenu y quitar el any
   */
  arrayMenu: any[];
  open?: boolean;
  listItemClass?: string;
  isAuthenticated?: boolean;
  handleSubOpen: () => void;
  openSub?: boolean
  selected?: boolean;
  handleOpen: ()=> void;
  handleRoutes: (path:string)=>void;

}
export const SCFCustomMiniDrawer = ({
    show = true, 
    arrayMenu = arrayMenuData,
    open = true,
    listItemClass ='listItemClass',
    isAuthenticated = false,
    handleSubOpen,
    openSub = true,
    selected,
    handleOpen,
    handleRoutes
}: SCFCustomMiniDrawerProps) => {
  

  return (
    <>
      {show && 
        <div style={isAuthenticated ? { display: 'block' } : { display: 'none' }} >
          <Drawer variant="permanent" open={open} transitionDuration={1}  >
            <List>
              {
                arrayMenu.map((menu:CustomDrawerDataTypeI, indexMenu:number) => (
                  <div key={indexMenu}>
                    {
                      menu && menu.subNav ?
                        <div key={indexMenu} >
                          {open ?
                            <ListItemButton
                              key={indexMenu}
                              className={listItemClass}
                              onClick={() => { handleSubOpen() }}
                              style={!selected ? { borderLeft: '4px solid red' } : { border: '0px solid ' }}
                            >
                              <SCFCustomIcon
                                iconPath={menu.icon}
                                color={!selected ? 'red' : 'black'}
                              />
                              <ListItemText
                                primary={menu.title}
                                style={!selected ? { color: 'red' } : { color: 'black' }}
                              />
                              {openSub ? <ExpandLess /> : <ExpandMore />}
                            </ListItemButton> 
                            :
                            <ListItemButton
                              key={indexMenu}
                              className={listItemClass}
                            >
                              <SCFCustomIcon
                                iconPath={menu.icon}
                                onClick={() => { handleOpen() }}
                              />
                            </ListItemButton>
                          }
                          <Collapse in={openSub} timeout="auto" unmountOnExit>
                            <List component="div" disablePadding>
                              {
                                menu.subNav.map((subMenu, indexSubMenu) => (
                                  <ListItemButton key={indexSubMenu} sx={{ pl: 4 }}>
                                    <div style={{ width: '24px' }}></div>
                                    <ListItemText
                                      onClick={() => { handleRoutes(subMenu.path) }}
                                      primary={subMenu.title}
                                      style={open ? { opacity: 1 } : { display: 'none' }} />
                                  </ListItemButton>
                                ))
                              }
                            </List>
                          </Collapse>
                        </div> :
                        <div key={indexMenu} >
                          {open ?
                            <ListItemButton
                              key={indexMenu}
                              className={listItemClass}
                              onClick={() => { handleSubOpen() }}
                              style={!selected ? { borderLeft: '4px solid red' } : { border: '0px solid ' }}
                            >
                              <SCFCustomIcon
                                iconPath={menu.icon}
                                color={!selected ? 'red' : 'black'}
                              />
                              <ListItemText
                                primary={menu.title}
                                onClick={() => { handleRoutes(menu.path) }}
                                style={!selected ? { color: 'red' } : { color: 'black' }}
                              />
                            </ListItemButton>
                            :
                            <ListItemButton
                              key={indexMenu}
                              className={listItemClass}
                            >
                              <SCFCustomIcon
                                iconPath={menu.icon}
                                onClick={() => { handleOpen() }}
                              />
                            </ListItemButton>
                          }
                        </div>
                    }
                  </div>
                ))
              }
            </List>
          </Drawer>
        </div>
      }
    </>
  );
}

