"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const FormatAlignLeft_1 = __importDefault(require("@mui/icons-material/FormatAlignLeft"));
const FormatAlignCenter_1 = __importDefault(require("@mui/icons-material/FormatAlignCenter"));
const FormatAlignRight_1 = __importDefault(require("@mui/icons-material/FormatAlignRight"));
const FormatAlignJustify_1 = __importDefault(require("@mui/icons-material/FormatAlignJustify"));
const Box_1 = __importDefault(require("@mui/material/Box"));
const ToggleButton_1 = __importDefault(require("@mui/material/ToggleButton"));
const ToggleButtonGroup_1 = __importDefault(require("@mui/material/ToggleButtonGroup"));
const SCFToggleButtonDemo = () => {
    const [alignment, setAlignment] = React.useState('left');
    const handleChange = (event, newAlignment) => {
        /**
         * TODO MEJORAR
         */
        console.warn(event);
        setAlignment(newAlignment);
    };
    const children = [
        React.createElement(ToggleButton_1.default, { value: "left", key: "left" },
            React.createElement(FormatAlignLeft_1.default, null)),
        React.createElement(ToggleButton_1.default, { value: "center", key: "center" },
            React.createElement(FormatAlignCenter_1.default, null)),
        React.createElement(ToggleButton_1.default, { value: "right", key: "right" },
            React.createElement(FormatAlignRight_1.default, null)),
        React.createElement(ToggleButton_1.default, { value: "justify", key: "justify" },
            React.createElement(FormatAlignJustify_1.default, null)),
    ];
    const control = {
        value: alignment,
        onChange: handleChange,
        exclusive: true,
    };
    return (React.createElement(Box_1.default, { sx: {
            display: 'flex',
            flexDirection: 'column',
            alignItems: 'center',
            // TODO Replace with Stack
            '& > :not(style) + :not(style)': { mt: 2 },
        } },
        React.createElement(ToggleButtonGroup_1.default, { size: "small", ...control }, children)));
};
exports.default = SCFToggleButtonDemo;
