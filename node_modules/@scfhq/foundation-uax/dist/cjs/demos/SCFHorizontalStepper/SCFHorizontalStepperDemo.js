"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importStar(require("react"));
const Typography_1 = __importDefault(require("@mui/material/Typography"));
const components_1 = require("../../components");
const material_1 = require("@mui/material");
const system_1 = require("@mui/system");
const SCFHorizontalStepperDemo = () => {
    const steps = ["Example A", "Example B", "Example C"];
    const [activeStep, setActiveStep] = (0, react_1.useState)(0);
    const [skipped, setSkipped] = (0, react_1.useState)(new Set());
    const isStepOptional = (step) => {
        return step === 1;
    };
    const isStepSkipped = (step) => {
        return skipped.has(step);
    };
    const handleNext = () => {
        let newSkipped = skipped;
        if (isStepSkipped(activeStep)) {
            newSkipped = new Set(newSkipped.values());
            newSkipped.delete(activeStep);
        }
        setActiveStep((prevActiveStep) => prevActiveStep + 1);
        setSkipped(newSkipped);
    };
    const handleBack = () => {
        setActiveStep((prevActiveStep) => prevActiveStep - 1);
    };
    const handleSkip = () => {
        if (!isStepOptional(activeStep)) {
            throw new Error("You can't skip a step that isn't optional.");
        }
        setActiveStep((prevActiveStep) => prevActiveStep + 1);
        setSkipped((prevSkipped) => {
            const newSkipped = new Set(prevSkipped.values());
            newSkipped.add(activeStep);
            return newSkipped;
        });
    };
    const handleReset = () => {
        setActiveStep(0);
    };
    return (react_1.default.createElement(react_1.default.Fragment, null,
        react_1.default.createElement(Typography_1.default, { variant: "h1", gutterBottom: true, fontWeight: "bold", sx: { mt: 8 } }, "Horizontal Stepper"),
        react_1.default.createElement(components_1.SCFDivider, { sx: { mb: 4 } }),
        react_1.default.createElement(system_1.Box, { sx: { width: "100%" } },
            react_1.default.createElement(components_1.SCFHorizontalStepper, { activeStep: activeStep }, steps.map((label, index) => {
                const stepProps = {};
                const labelProps = {};
                if (isStepOptional(index)) {
                    labelProps.optional = (react_1.default.createElement(Typography_1.default, { variant: "caption" }, "Optional"));
                }
                if (isStepSkipped(index)) {
                    stepProps.completed = false;
                }
                return (react_1.default.createElement(material_1.Step, { key: label, ...stepProps },
                    react_1.default.createElement(material_1.StepLabel, { ...labelProps }, label)));
            })),
            activeStep === steps.length ? (react_1.default.createElement(react_1.default.Fragment, null,
                react_1.default.createElement(Typography_1.default, { sx: { mt: 2, mb: 1 } }, "All steps completed - you're finished"),
                react_1.default.createElement(system_1.Box, { sx: { display: "flex", flexDirection: "row", pt: 2 } },
                    react_1.default.createElement(system_1.Box, { sx: { flex: "1 1 auto" } }),
                    react_1.default.createElement(components_1.SCFButton, { onClick: handleReset }, "Reset")))) : (react_1.default.createElement(react_1.default.Fragment, null,
                react_1.default.createElement(Typography_1.default, { sx: { mt: 2, mb: 1 } },
                    "Step ",
                    activeStep + 1),
                react_1.default.createElement(system_1.Box, { sx: { display: "flex", flexDirection: "row", pt: 2 } },
                    react_1.default.createElement(components_1.SCFButton, { color: "inherit", disabled: activeStep === 0, onClick: handleBack, sx: { mr: 1 } }, "Back"),
                    react_1.default.createElement(system_1.Box, { sx: { flex: "1 1 auto" } }),
                    isStepOptional(activeStep) && (react_1.default.createElement(components_1.SCFButton, { color: "inherit", onClick: handleSkip, sx: { mr: 1 } }, "Skip")),
                    react_1.default.createElement(components_1.SCFButton, { onClick: handleNext }, activeStep === steps.length - 1 ? "Finish" : "Next")))))));
};
exports.default = SCFHorizontalStepperDemo;
