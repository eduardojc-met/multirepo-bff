"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importStar(require("react"));
const Typography_1 = __importDefault(require("@mui/material/Typography"));
const components_1 = require("../../components");
const react_hook_form_1 = require("react-hook-form");
const Grid_1 = __importDefault(require("@mui/material/Grid"));
const SCFDatePickerDemo = () => {
    const dateNow = new Date();
    dateNow.setMonth(dateNow.getMonth() - 1);
    const [dateFrom, setDateFrom] = (0, react_1.useState)(dateNow.toISOString().substring(0, 10));
    const [dateTo, setDateTo] = (0, react_1.useState)(dateNow.toISOString().substring(0, 10));
    const form = (0, react_hook_form_1.useForm)();
    const { handleSubmit, getValues } = form;
    const date_diff_indays = (date1, date2) => {
        const dt1 = new Date(date1);
        const dt2 = new Date(date2);
        return Math.floor((Date.UTC(dt2.getFullYear(), dt2.getMonth(), dt2.getDate()) -
            Date.UTC(dt1.getFullYear(), dt1.getMonth(), dt1.getDate())) /
            (1000 * 60 * 60 * 24));
    };
    const rulesDateValidate = () => {
        const diff = date_diff_indays(dateFrom, dateTo);
        console.warn(diff);
        return diff >= 0 && diff <= 31;
    };
    const rulesDates = {
        validate: rulesDateValidate,
    };
    const onSubmit = () => {
        console.log(typeof "Hello world");
        console.log('GET VALUES');
        console.log(getValues(["idDateFrom", "idDateTo"]));
    };
    return (react_1.default.createElement(react_1.default.Fragment, null,
        react_1.default.createElement(Typography_1.default, { variant: "h1", gutterBottom: true, fontWeight: "bold", sx: { mt: 8 } }, "DatePicker"),
        react_1.default.createElement(components_1.SCFDivider, { sx: { mb: 4 } }),
        react_1.default.createElement(Grid_1.default, { container: true },
            react_1.default.createElement(Grid_1.default, { container: true, direction: "column", justifyContent: "start", alignItems: "center", spacing: 2, xs: 6 },
                react_1.default.createElement(Grid_1.default, { item: true },
                    react_1.default.createElement(Typography_1.default, { variant: "h5" }, "Basic DatePicker")),
                react_1.default.createElement(Grid_1.default, { item: true },
                    react_1.default.createElement(components_1.SCFDatePicker, null))),
            react_1.default.createElement(Grid_1.default, { container: true, direction: "column", justifyContent: "center", alignItems: "center", xs: 6, spacing: 4 },
                react_1.default.createElement(Grid_1.default, { item: true },
                    react_1.default.createElement(Typography_1.default, { variant: "h5" }, "Complex DatePicker with validation")),
                react_1.default.createElement(Grid_1.default, { item: true, container: true, spacing: 2, justifyContent: "center", alignItems: "center" },
                    react_1.default.createElement(Grid_1.default, { item: true, xs: 6 },
                        react_1.default.createElement(components_1.SCFDatePicker, { fullWidth: true, name: "idDateFrom", form: form, rules: rulesDates, variant: "outlined", type: "date", value: dateFrom, onChange: (e) => {
                                setDateFrom(e.target.value);
                                form.setValue("idDateFrom", e.target.value, {
                                    shouldValidate: form && form.formState && form.formState.isSubmitted,
                                });
                            }, label: "Date from label test", className: "medium" })),
                    react_1.default.createElement(Grid_1.default, { item: true, xs: 6 },
                        react_1.default.createElement(components_1.SCFDatePicker, { fullWidth: true, name: "idDateTo", form: form, rules: rulesDates, variant: "outlined", type: "date", value: dateTo, onChange: (e) => {
                                setDateTo(e.target.value);
                                form.setValue("idDateTo", e.target.value, {
                                    shouldValidate: form && form.formState && form.formState.isSubmitted,
                                });
                            }, label: "Date to label test", className: "medium" }))),
                react_1.default.createElement(Grid_1.default, { item: true },
                    react_1.default.createElement(components_1.SCFButton, { type: "submit", fullWidth: true, variant: "contained", onClick: handleSubmit(onSubmit) }, "Filter dates"))))));
};
exports.default = SCFDatePickerDemo;
