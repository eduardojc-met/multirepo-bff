"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importStar(require("react"));
const Select_1 = __importDefault(require("@mui/material/Select"));
const material_1 = require("@mui/material");
const SCFSelect = ({ show = true, options = [], required = false, label = "Choose an option", inputLabel = false, sx = [], onChange, ...muiprops }) => {
    const [value, setValue] = (0, react_1.useState)("");
    const handleChange = (event) => {
        setValue(event.target.value);
        onChange ? onChange(event) : null;
    };
    /**
     * Set initial value. Takes care about value type and only accepts strings.
     */
    (0, react_1.useEffect)(() => {
        setValue(typeof muiprops.value === "string" ? muiprops.value : "");
    });
    return (react_1.default.createElement(react_1.default.Fragment, null, show && (react_1.default.createElement(material_1.FormControl, { required: required, 
        // You cannot spread `sx` directly because `SxProps` (typeof sx) can be an array.
        sx: [...(Array.isArray(sx) ? sx : [sx])] },
        label && react_1.default.createElement(material_1.InputLabel, { id: `${muiprops.id}-label` },
            " ",
            label,
            " "),
        react_1.default.createElement(Select_1.default, { labelId: `${muiprops.id}-label`, label: label, ...muiprops, onChange: handleChange, value: value, name: muiprops.name }, options.map((option, index) => {
            return (react_1.default.createElement(material_1.MenuItem, { key: index, value: option.value }, option.name));
        }))))));
};
exports.default = SCFSelect;
