"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SCFBasicTable = void 0;
const react_1 = __importStar(require("react"));
const Table_1 = __importDefault(require("@mui/material/Table"));
const TableBody_1 = __importDefault(require("@mui/material/TableBody"));
const TableCell_1 = __importDefault(require("@mui/material/TableCell"));
const TableContainer_1 = __importDefault(require("@mui/material/TableContainer"));
const TablePagination_1 = __importDefault(require("@mui/material/TablePagination"));
const TableHead_1 = __importDefault(require("@mui/material/TableHead"));
const TableRow_1 = __importDefault(require("@mui/material/TableRow"));
const Paper_1 = __importDefault(require("@mui/material/Paper"));
const Edit_1 = __importDefault(require("@mui/icons-material/Edit"));
const Delete_1 = __importDefault(require("@mui/icons-material/Delete"));
const system_1 = require("@mui/system");
const BasicTableStyle_1 = require("./BasicTableStyle");
const Typography_1 = __importDefault(require("@mui/material/Typography"));
const IconButton_1 = __importDefault(require("@mui/material/IconButton"));
const Visibility_1 = __importDefault(require("@mui/icons-material/Visibility"));
const PowerSettingsNew_1 = __importDefault(require("@mui/icons-material/PowerSettingsNew"));
const AddCircle_1 = __importDefault(require("@mui/icons-material/AddCircle"));
const Chip_1 = __importDefault(require("@mui/material/Chip"));
const SCFBasicTable = ({ show = true, arrayHeader, arrayBody, width = "100%", tableTitle = "Table title", actionLabel = "Action", stickyHeader = true, handleActive = undefined, handleDetails = undefined, handleDelete = undefined, handleEdit = undefined, handleAdd = undefined, add = true, labelRowsPerPage = 'PÃ¡ginas', ...muiprops }) => {
    const [page, setPage] = (0, react_1.useState)(0);
    const [rowsPerPage, setRowsPerPage] = (0, react_1.useState)(4);
    const handleChangePage = (event, newPage) => {
        event.preventDefault();
        setPage(newPage);
    };
    const handleChangeRowsPerPage = (event) => {
        setRowsPerPage(+event.target.value);
        setPage(0);
    };
    (0, react_1.useEffect)(() => {
        setPage(0);
    }, [arrayBody]);
    return (react_1.default.createElement(react_1.default.Fragment, null, show && (react_1.default.createElement(Paper_1.default, { ...muiprops },
        react_1.default.createElement(system_1.Box, { sx: {
                display: "flex",
                justifyContent: "space-between",
                alignItems: "center",
                alignContent: "center",
                padding: "12px",
                backgroundColor: "white",
            } },
            react_1.default.createElement(Typography_1.default, { variant: "h4" },
                " ",
                tableTitle),
            add &&
                (react_1.default.createElement(IconButton_1.default, { onClick: handleAdd },
                    react_1.default.createElement(AddCircle_1.default, { color: "primary", sx: { fontSize: 40 } })))),
        react_1.default.createElement(TableContainer_1.default, { sx: { maxHeight: 400 } },
            react_1.default.createElement(Table_1.default, { stickyHeader: true, sx: { minWidth: 700 }, "aria-label": "customized table, sticky table", width: width, ...muiprops },
                react_1.default.createElement(TableHead_1.default, null,
                    react_1.default.createElement(TableRow_1.default, null, arrayHeader.map((name, index) => {
                        return (react_1.default.createElement(BasicTableStyle_1.StyledTableCell, { key: index }, name));
                    }))),
                react_1.default.createElement(TableBody_1.default, null, arrayBody
                    .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)
                    .map((row, index) => {
                    const arrayActions = row && row?.actions;
                    const details = arrayActions && arrayActions.includes('details');
                    const editable = arrayActions && arrayActions.includes('editable');
                    const reactive = arrayActions && arrayActions.includes('reactive');
                    const deletable = arrayActions && arrayActions.includes('deletable');
                    return (react_1.default.createElement(TableRow_1.default, { key: index },
                        Object.entries(row).map(([key, value], index) => {
                            const active = key === "status" && value && value === 'A';
                            const inactive = key === "status" && value && value === 'I';
                            const inAction = Array.isArray(value);
                            const isStatus = key === "status" && (value === 'I' || value === 'A') ? true : false;
                            return (react_1.default.createElement(react_1.default.Fragment, null, !inAction &&
                                react_1.default.createElement(TableCell_1.default, { sx: { textAlign: "center" }, key: `${index}_${key}` },
                                    active &&
                                        react_1.default.createElement(Chip_1.default, { label: "Active", sx: {
                                                border: "1px solid #63ba68",
                                                backgroundColor: "#E0F2E1",
                                            } }),
                                    inactive &&
                                        react_1.default.createElement(Chip_1.default, { label: "Inactive", sx: {
                                                border: "1px solid #cc0000",
                                                backgroundColor: "#FCCCCC",
                                            } }),
                                    !inAction && !isStatus &&
                                        react_1.default.createElement("span", { style: { textAlign: "center" } }, value))));
                        }),
                        react_1.default.createElement(TableCell_1.default, { sx: { textAlign: "center" }, key: index },
                            details && (react_1.default.createElement(IconButton_1.default, { onClick: handleDetails
                                    ? () => {
                                        handleDetails(row);
                                    }
                                    : undefined },
                                react_1.default.createElement(Visibility_1.default, null))),
                            editable && (react_1.default.createElement(IconButton_1.default, { onClick: handleEdit
                                    ? () => {
                                        handleEdit(row);
                                    }
                                    : undefined },
                                react_1.default.createElement(Edit_1.default, null))),
                            deletable && (react_1.default.createElement(IconButton_1.default, { onClick: handleDelete
                                    ? () => {
                                        handleDelete(row);
                                    }
                                    : undefined },
                                react_1.default.createElement(Delete_1.default, null))),
                            reactive && (react_1.default.createElement(IconButton_1.default, { onClick: handleActive
                                    ? () => {
                                        handleActive(row);
                                    }
                                    : undefined },
                                react_1.default.createElement(PowerSettingsNew_1.default, null))))));
                })))),
        react_1.default.createElement(TablePagination_1.default, { rowsPerPageOptions: [4, 5, 10, 25, 100], component: "div", count: arrayBody.length, rowsPerPage: rowsPerPage, page: page, onPageChange: handleChangePage, labelRowsPerPage: labelRowsPerPage, onRowsPerPageChange: handleChangeRowsPerPage, sx: { position: "sticky" } })))));
};
exports.SCFBasicTable = SCFBasicTable;
exports.default = exports.SCFBasicTable;
