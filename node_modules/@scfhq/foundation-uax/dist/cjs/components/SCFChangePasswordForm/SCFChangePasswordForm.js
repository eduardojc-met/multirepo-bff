"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SCFChangePasswordForm = void 0;
const material_1 = require("@mui/material");
const react_1 = __importStar(require("react"));
const react_hook_form_1 = require("react-hook-form");
const SCFAlert_1 = __importDefault(require("../SCFAlert/SCFAlert"));
const SCFButton_1 = __importDefault(require("../SCFButton/SCFButton"));
const SCFPassword_1 = __importDefault(require("../SCFPassword/SCFPassword"));
;
const SCFChangePasswordForm = ({ show = true, type = 'new', onSubmit, maxWidth = "340px", currentPassword = '', currentPasswordLabel = 'Current password', serverError = false, serverErrorLabel = 'Please, try another password', newPasswordLabel = 'New password', newPasswordConfirmationLabel = 'New password confirmation', submitLabel = 'Submit', currentPasswordError = 'Wrong password', newPasswordConfirmationErrorLabel = 'The password and its confirmation do not match', similarityValidation = 'The password and new password are too similar, please introduce another one', similarityRatio = 0.7, newPasswordValidationMessages, ...propsMaterial }) => {
    const [showChangePassword, setShowChangePassword] = (0, react_1.useState)(false);
    const { register, handleSubmit, formState: { errors }, trigger } = (0, react_hook_form_1.useForm)({ mode: "onSubmit" });
    const [validateCurrentPassword, setValidateCurrentPassword] = (0, react_1.useState)(false);
    const [validateNewPassword, setValidateNewPassword] = (0, react_1.useState)(false);
    const [validateSimilarity, setValidateSimilarity] = (0, react_1.useState)(false);
    const stringSimilarity = require("string-similarity");
    const compareNewPassword = (data) => {
        if (data.newPassword === data.newPasswordConfirm) {
            onSubmit(data);
            setValidateNewPassword(false);
        }
        else {
            setValidateNewPassword(true);
        }
    };
    const handleRegistration = (data) => {
        if (showChangePassword) {
            if (currentPassword && currentPassword !== data.password) {
                setValidateCurrentPassword(true);
            }
            else {
                const similarity = stringSimilarity.compareTwoStrings(data.password, data.newPassword);
                setValidateCurrentPassword(false);
                if (similarity <= similarityRatio) {
                    setValidateSimilarity(false);
                    compareNewPassword(data);
                }
                else {
                    setValidateSimilarity(true);
                }
            }
        }
        else {
            compareNewPassword(data);
        }
    };
    (0, react_1.useEffect)(() => {
        if (Object.keys(errors).length !== 0) {
            trigger();
        }
    }, [newPasswordValidationMessages]);
    (0, react_1.useEffect)(() => {
        if (type === 'change') {
            setShowChangePassword(true);
        }
    }, [type]);
    const registerO = {
        required: newPasswordValidationMessages.required,
        minLength: {
            value: 8,
            message: newPasswordValidationMessages.min
        },
        maxLength: {
            value: 64,
            message: newPasswordValidationMessages.max
        },
        pattern: {
            value: /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[$@$!%*?&])[A-Za-z\d$@$!%*?&]/,
            message: newPasswordValidationMessages.pattern
        }
    };
    return (react_1.default.createElement(react_1.default.Fragment, null, show && (react_1.default.createElement(material_1.Paper, { sx: { p: 4, maxWidth: maxWidth }, ...propsMaterial },
        react_1.default.createElement("form", { onSubmit: handleSubmit(handleRegistration) },
            react_1.default.createElement(material_1.Stack, { spacing: 2, direction: "column" },
                showChangePassword && (react_1.default.createElement(react_1.default.Fragment, null,
                    react_1.default.createElement(SCFPassword_1.default, { name: "password", variant: 'standard', label: currentPasswordLabel, newPasswordValidation: { ...register('password', { required: newPasswordValidationMessages.required }) } }),
                    react_1.default.createElement(material_1.Typography, { variant: 'bodySmall', mb: 2, color: 'primary' }, errors?.password && errors.password.message))),
                react_1.default.createElement(SCFPassword_1.default, { newPasswordValidation: { ...register('newPassword', registerO) }, name: "newPassword", variant: 'standard', label: newPasswordLabel }),
                react_1.default.createElement(material_1.Typography, { variant: 'bodySmall', mb: 2, color: 'primary' }, errors?.newPassword && errors.newPassword.message),
                react_1.default.createElement(SCFPassword_1.default, { newPasswordValidation: { ...register('newPasswordConfirm', { required: newPasswordValidationMessages.required }) }, name: "newPasswordConfirm", variant: 'standard', label: newPasswordConfirmationLabel }),
                react_1.default.createElement(material_1.Typography, { variant: 'bodySmall', mb: 2, color: 'primary' }, errors?.newPasswordConfirm && errors.newPasswordConfirm.message),
                serverError && (react_1.default.createElement(SCFAlert_1.default, { severity: "error", children: serverErrorLabel })),
                validateCurrentPassword && (react_1.default.createElement(SCFAlert_1.default, { severity: "error", children: currentPasswordError })),
                validateNewPassword && (react_1.default.createElement(SCFAlert_1.default, { severity: "error", children: newPasswordConfirmationErrorLabel })),
                validateSimilarity && (react_1.default.createElement(SCFAlert_1.default, { severity: "error", children: similarityValidation })),
                react_1.default.createElement(SCFButton_1.default, { variant: 'contained', color: 'primary', type: "submit" }, submitLabel)))))));
};
exports.SCFChangePasswordForm = SCFChangePasswordForm;
exports.SCFChangePasswordForm.defaultProps = {
    newPasswordValidationMessages: {
        required: 'Password is required',
        min: 'Password must have at least 8 characters',
        max: "Password can't be longer than 64 characters",
        pattern: 'The password must contains at least one uppercase one lowercase one number and one special case character'
    }
};
