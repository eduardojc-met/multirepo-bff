"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SCFCustomMiniDrawer = void 0;
const React = __importStar(require("react"));
const Drawer_1 = __importDefault(require("@mui/material/Drawer"));
const List_1 = __importDefault(require("@mui/material/List"));
const ListItemText_1 = __importDefault(require("@mui/material/ListItemText"));
const ListItemButton_1 = __importDefault(require("@mui/material/ListItemButton"));
const ExpandLess_1 = __importDefault(require("@mui/icons-material/ExpandLess"));
const ExpandMore_1 = __importDefault(require("@mui/icons-material/ExpandMore"));
const Collapse_1 = __importDefault(require("@mui/material/Collapse"));
const styles_1 = require("@mui/material/styles");
const CustomMiniDrawerData_1 = require("./CustomMiniDrawerData");
const SCFCustomIcon_1 = require("../SCFCustomIcon/SCFCustomIcon");
const drawerWidth = 'auto';
;
const openedMixin = (theme) => ({
    width: drawerWidth,
    transition: theme.transitions.create('width', {
        easing: theme.transitions.easing.sharp,
        duration: theme.transitions.duration.enteringScreen,
    }),
    overflowX: 'hidden',
});
const closedMixin = (theme) => ({
    transition: theme.transitions.create('width', {
        easing: theme.transitions.easing.sharp,
        duration: theme.transitions.duration.leavingScreen,
    }),
    overflowX: 'hidden',
    width: `calc(${theme.spacing(7)} + 1px)`,
    [theme.breakpoints.up('sm')]: {
        width: `calc(${theme.spacing(8)} + 1px)`,
    },
});
const Drawer = (0, styles_1.styled)(Drawer_1.default, { shouldForwardProp: (prop) => prop !== 'open' })(({ theme, open }) => ({
    width: drawerWidth,
    flexShrink: 0,
    whiteSpace: 'nowrap',
    boxSizing: 'border-box',
    ...(open && {
        ...openedMixin(theme),
        '& .MuiDrawer-paper': openedMixin(theme),
    }),
    ...(!open && {
        ...closedMixin(theme),
        '& .MuiDrawer-paper': closedMixin(theme),
    }),
}));
const SCFCustomMiniDrawer = ({ show = true, arrayMenu = CustomMiniDrawerData_1.arrayMenuData, open = true, listItemClass = 'listItemClass', isAuthenticated = false, handleSubOpen, openSub = true, selected, handleOpen, handleRoutes }) => {
    return (React.createElement(React.Fragment, null, show &&
        React.createElement("div", { style: isAuthenticated ? { display: 'block' } : { display: 'none' } },
            React.createElement(Drawer, { variant: "permanent", open: open, transitionDuration: 1 },
                React.createElement(List_1.default, null, arrayMenu.map((menu, indexMenu) => (React.createElement("div", { key: indexMenu }, menu && menu.subNav ?
                    React.createElement("div", { key: indexMenu },
                        open ?
                            React.createElement(ListItemButton_1.default, { key: indexMenu, className: listItemClass, onClick: () => { handleSubOpen(); }, style: !selected ? { borderLeft: '4px solid red' } : { border: '0px solid ' } },
                                React.createElement(SCFCustomIcon_1.SCFCustomIcon, { iconPath: menu.icon, color: !selected ? 'red' : 'black' }),
                                React.createElement(ListItemText_1.default, { primary: menu.title, style: !selected ? { color: 'red' } : { color: 'black' } }),
                                openSub ? React.createElement(ExpandLess_1.default, null) : React.createElement(ExpandMore_1.default, null))
                            :
                                React.createElement(ListItemButton_1.default, { key: indexMenu, className: listItemClass },
                                    React.createElement(SCFCustomIcon_1.SCFCustomIcon, { iconPath: menu.icon, onClick: () => { handleOpen(); } })),
                        React.createElement(Collapse_1.default, { in: openSub, timeout: "auto", unmountOnExit: true },
                            React.createElement(List_1.default, { component: "div", disablePadding: true }, menu.subNav.map((subMenu, indexSubMenu) => (React.createElement(ListItemButton_1.default, { key: indexSubMenu, sx: { pl: 4 } },
                                React.createElement("div", { style: { width: '24px' } }),
                                React.createElement(ListItemText_1.default, { onClick: () => { handleRoutes(subMenu.path); }, primary: subMenu.title, style: open ? { opacity: 1 } : { display: 'none' } }))))))) :
                    React.createElement("div", { key: indexMenu }, open ?
                        React.createElement(ListItemButton_1.default, { key: indexMenu, className: listItemClass, onClick: () => { handleSubOpen(); }, style: !selected ? { borderLeft: '4px solid red' } : { border: '0px solid ' } },
                            React.createElement(SCFCustomIcon_1.SCFCustomIcon, { iconPath: menu.icon, color: !selected ? 'red' : 'black' }),
                            React.createElement(ListItemText_1.default, { primary: menu.title, onClick: () => { handleRoutes(menu.path); }, style: !selected ? { color: 'red' } : { color: 'black' } }))
                        :
                            React.createElement(ListItemButton_1.default, { key: indexMenu, className: listItemClass },
                                React.createElement(SCFCustomIcon_1.SCFCustomIcon, { iconPath: menu.icon, onClick: () => { handleOpen(); } })))))))))));
};
exports.SCFCustomMiniDrawer = SCFCustomMiniDrawer;
