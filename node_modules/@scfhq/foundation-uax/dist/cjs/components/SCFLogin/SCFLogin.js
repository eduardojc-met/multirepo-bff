"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importStar(require("react"));
const react_google_recaptcha_1 = __importDefault(require("react-google-recaptcha"));
const Typography_1 = __importDefault(require("@mui/material/Typography"));
const Alert_1 = __importDefault(require("@mui/material/Alert"));
const TextField_1 = __importDefault(require("@mui/material/TextField"));
const Paper_1 = __importDefault(require("@mui/material/Paper"));
const Checkbox_1 = __importDefault(require("@mui/material/Checkbox"));
const FormControlLabel_1 = __importDefault(require("@mui/material/FormControlLabel"));
const Button_1 = __importDefault(require("@mui/material/Button"));
const Box_1 = __importDefault(require("@mui/material/Box"));
const Person_1 = __importDefault(require("@mui/icons-material/Person"));
const Visibility_1 = __importDefault(require("@mui/icons-material/Visibility"));
const VisibilityOff_1 = __importDefault(require("@mui/icons-material/VisibilityOff"));
const Link_1 = __importDefault(require("@mui/material/Link"));
const SCFLogin = ({ onSubmit, forgotPassword = undefined, loginError, show = true, maxWidth = "365px", userInputLabel = "Username", passwordInputLabel = "Password", checkBoxLabel = "Remember me", loginErrorLabel = "Failed to sign in", loginTitle = "Welcome", loginSubtitle = "Log in to get started", forgotText = "Forgot your password?", submitLabel = "Submit", evaluateRecaptchaToken = undefined, /**
 * set if reCAPTCHA component is rendered or not
 */ recaptcha = false, 
/** siteKey es la key necesaria para la Api de google reCaptcha, y la apiUrl el token de back, son pasados por props,
 * para que cada proyecto las pase de forma dinámica. Son opcionales.
 */
apiUrl = ' ', siteKey = ' ', rememberMe = true }) => {
    const [pwd, setPwd] = (0, react_1.useState)("");
    const [user, setUser] = (0, react_1.useState)("");
    const [rememberMeOption, setRememberMeOption] = (0, react_1.useState)(false);
    const [disabled, setDisabled] = (0, react_1.useState)(true);
    const [showPwd, setShowPwd] = (0, react_1.useState)(false);
    const [noRobot, setNoRobot] = (0, react_1.useState)(false);
    const [captchaCheck, setCaptchaCheck] = (0, react_1.useState)(false);
    const [forgotPassordProps, setforgotPassordProps] = (0, react_1.useState)({});
    const getTokenEvaluation = (token) => {
        if (evaluateRecaptchaToken) {
            evaluateRecaptchaToken(token, apiUrl)
                .then(resp => {
                const captcha = resp.data;
                setNoRobot(captcha);
                setCaptchaCheck(true);
            });
        }
    };
    /**
     * Gestiona el envío del formulario cuando pulsamos enter o hacemos clic en el botón de envío
     * @param {*} e
     * @param {*} FormValues Es un diccionario con los valores del formulario
     */
    const handleKeypress = (e) => {
        if (e.key === "Enter") {
            handleSubmit();
        }
    };
    /**
     * Handle form submit
     */
    const handleSubmit = () => {
        doSubmit(user, pwd, rememberMeOption);
    };
    // const  handleCaptcha = (value:any) => getTokenEvaluation(value);
    const handleCaptchaWhenLogin = () => {
        if (recaptcha) {
            noRobot ? handleSubmit() : null;
        }
        else {
            handleSubmit();
        }
    };
    /**
     * Button state and error label control
     */
    (0, react_1.useEffect)(() => {
        if (recaptcha) {
            if (captchaCheck) {
                setDisabled(false);
                setDisabled(!user || !pwd);
            }
            else {
                setDisabled(true);
            }
        }
        else {
            setDisabled(!user || !pwd);
        }
    }, [user, pwd, captchaCheck]);
    /**
     * Do the callback for a regular login
     * @param user
     * @param pwd
     * @param rememberMe
     */
    const doSubmit = (user, pwd, rememberMe) => {
        onSubmit(user, pwd, rememberMe);
    };
    (0, react_1.useEffect)(() => {
        if (typeof forgotPassword === 'string') {
            setforgotPassordProps({ href: forgotPassword });
        }
        else {
            setforgotPassordProps({ href: '#', onClick: forgotPassword });
        }
    }, []);
    (0, react_1.useEffect)(() => {
        setRememberMeOption(rememberMe);
    }, []);
    return (react_1.default.createElement(react_1.default.Fragment, null, show ? (react_1.default.createElement(Paper_1.default, { className: "loginComponent", sx: { p: 4, maxWidth: maxWidth } },
        react_1.default.createElement("form", null,
            react_1.default.createElement(Typography_1.default, { variant: "h2", mt: 0 }, loginTitle),
            react_1.default.createElement(Typography_1.default, { variant: "bodyMedium", mb: 2 }, loginSubtitle),
            loginError && react_1.default.createElement(Alert_1.default, { severity: "error" }, loginErrorLabel),
            react_1.default.createElement(TextField_1.default, { fullWidth: true, id: "user", label: userInputLabel, value: user, variant: "standard", onKeyPress: handleKeypress, onChange: (e) => {
                    setUser(e.target.value);
                }, InputProps: {
                    endAdornment: react_1.default.createElement(Person_1.default, null),
                } }),
            react_1.default.createElement(TextField_1.default, { fullWidth: true, id: "field2", variant: "standard", value: pwd, onChange: (e) => {
                    setPwd(e.target.value);
                }, label: passwordInputLabel, type: showPwd ? "text" : "password", InputProps: {
                    endAdornment: (react_1.default.createElement("span", { onClick: () => setShowPwd(!showPwd) }, showPwd ? react_1.default.createElement(Visibility_1.default, null) : react_1.default.createElement(VisibilityOff_1.default, null))),
                } }),
            react_1.default.createElement(Box_1.default, { sx: { my: 2, display: "flex", flexDirection: "column" } },
                rememberMe && (react_1.default.createElement(FormControlLabel_1.default, { control: react_1.default.createElement(Checkbox_1.default, { checked: rememberMeOption, onChange: () => {
                            setRememberMeOption(!rememberMeOption);
                        } }), label: react_1.default.createElement(Typography_1.default, { variant: "bodySmall", fontWeight: "bold" }, checkBoxLabel) })),
                forgotPassword && (react_1.default.createElement(Box_1.default, { sx: { mt: 1, mb: 2 } },
                    react_1.default.createElement(Link_1.default, { ...forgotPassordProps, style: { textDecoration: "none" } },
                        react_1.default.createElement(Typography_1.default, { variant: "bodySmall", fontWeight: "bold", color: "primary" }, forgotText))))),
            react_1.default.createElement(Box_1.default, { sx: { display: "flex", justifyContent: "center", mt: 1, mb: 2 } },
                react_1.default.createElement(Button_1.default, { variant: "contained", color: "primary", fullWidth: true, disabled: disabled, size: "large", onClick: handleCaptchaWhenLogin },
                    react_1.default.createElement("span", null, submitLabel))),
            recaptcha && evaluateRecaptchaToken &&
                react_1.default.createElement(Box_1.default, { sx: { display: "flex", justifyContent: "center", pt: 2, mb: 1.5 } },
                    react_1.default.createElement(react_google_recaptcha_1.default, { sitekey: siteKey, onChange: getTokenEvaluation }))))) : null));
};
exports.default = SCFLogin;
