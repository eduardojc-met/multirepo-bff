"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importStar(require("react"));
const Typography_1 = __importDefault(require("@mui/material/Typography"));
const Alert_1 = __importDefault(require("@mui/material/Alert"));
const TextField_1 = __importDefault(require("@mui/material/TextField"));
const Paper_1 = __importDefault(require("@mui/material/Paper"));
const Checkbox_1 = __importDefault(require("@mui/material/Checkbox"));
const FormControlLabel_1 = __importDefault(require("@mui/material/FormControlLabel"));
const Button_1 = __importDefault(require("@mui/material/Button"));
const Box_1 = __importDefault(require("@mui/material/Box"));
const ArrowBack_1 = __importDefault(require("@mui/icons-material/ArrowBack"));
const Person_1 = __importDefault(require("@mui/icons-material/Person"));
const Visibility_1 = __importDefault(require("@mui/icons-material/Visibility"));
const VisibilityOff_1 = __importDefault(require("@mui/icons-material/VisibilityOff"));
const SCFDoubleStepLogin = ({ onLookup, onSubmit, forgotPasswordUrl, forgotPassword = false, loginError, show = true, maxWidth = "365px", emailInputLabel = "Email", passwordInputLabel = "Password", checkBoxLabel = "Remember me", loginErrorLabel = "Failed to sign in", loginTitle = "Welcome", loginSubtitle = "Log in to get started", forgotText = "Forgot your password?", nextLabel = "Next", submitLabel = "Submit", notEmailErrorLabel = "Please indicate a valid email", }) => {
    const [isPreAuthenticated, setIsPreAuthenticated] = (0, react_1.useState)(false);
    const [pwd, setPwd] = (0, react_1.useState)("");
    const [email, setEmail] = (0, react_1.useState)("");
    const [rememberMe, setRememberMe] = (0, react_1.useState)(false);
    const [notAnEmail, setNotAnEmail] = (0, react_1.useState)(false);
    const [disabled, setDisabled] = (0, react_1.useState)(true);
    const [showPwd, setShowPwd] = (0, react_1.useState)(false);
    const emailRegex = /^[-\w.%+]{1,64}@(?:[A-Z0-9-]{1,63}\.){1,125}[A-Z]{2,63}$/i;
    /**
     * Gestiona el envío del formulario cuando pulsamos enter o hacemos clic en el botón de envío
     * @param {*} e
     * @param {*} FormValues Es un diccionario con los valores del formulario
     */
    const handleKeypress = (e) => {
        if (e.key === "Enter") {
            handleSubmit();
        }
    };
    /**
     * Handle form submit
     */
    const handleSubmit = () => {
        if (emailRegex.test(email)) {
            if (isPreAuthenticated) {
                doSubmit(email, pwd, rememberMe);
            }
            else {
                doLookup(email);
            }
        }
    };
    /**
     * Return to first step
     */
    const handleBack = () => {
        setIsPreAuthenticated(false);
    };
    /**
     * Button state and error label control
     */
    (0, react_1.useEffect)(() => {
        setDisabled(!(email && emailRegex.test(email)));
        setNotAnEmail((email && !emailRegex.test(email)) === true); // prevent empty string error from regex expr.
    }, [email]);
    /**
     * Do the callback for the first check and go to second step if it's success
     * @param email
     */
    const doLookup = (email) => {
        setIsPreAuthenticated(onLookup(email));
    };
    /**
     * Do the callback for a regular login
     * @param email
     * @param pwd
     * @param rememberMe
     */
    const doSubmit = (email, pwd, rememberMe) => {
        onSubmit(email, pwd, rememberMe);
    };
    return (react_1.default.createElement(react_1.default.Fragment, null, show ? (react_1.default.createElement(Paper_1.default, { className: "loginComponent", sx: { p: 4, maxWidth: maxWidth } },
        react_1.default.createElement("form", { onSubmit: (e) => {
                e.preventDefault();
            } },
            react_1.default.createElement(Typography_1.default, { variant: "h2", mt: 0 }, loginTitle),
            react_1.default.createElement(Typography_1.default, { variant: "bodyMedium", mb: 2 }, loginSubtitle),
            loginError && react_1.default.createElement(Alert_1.default, { severity: "error" }, loginErrorLabel),
            isPreAuthenticated ? (react_1.default.createElement(Box_1.default, { sx: {
                    display: "flex",
                    justifyContent: "flex-start",
                    alignItems: "center",
                    mt: 3,
                } },
                react_1.default.createElement(ArrowBack_1.default, { sx: { marginRight: 2, color: "primary", cursor: "pointer" }, onClick: handleBack }),
                react_1.default.createElement(Typography_1.default, { variant: "bodySmall", fontWeight: "bold" }, email))) : (react_1.default.createElement(react_1.default.Fragment, null,
                react_1.default.createElement(TextField_1.default, { fullWidth: true, id: "email", label: emailInputLabel, value: email, variant: "standard", onKeyPress: handleKeypress, onChange: (e) => {
                        setEmail(e.target.value);
                    }, InputProps: {
                        endAdornment: react_1.default.createElement(Person_1.default, null),
                    } }),
                notAnEmail && (react_1.default.createElement(Alert_1.default, { severity: "error" },
                    react_1.default.createElement("strong", null, notEmailErrorLabel))))),
            isPreAuthenticated && (react_1.default.createElement(TextField_1.default, { fullWidth: true, id: "field2", variant: "standard", value: pwd, onChange: (e) => {
                    setPwd(e.target.value);
                }, label: passwordInputLabel, type: showPwd ? "text" : "password", InputProps: {
                    endAdornment: (react_1.default.createElement("span", { onClick: () => setShowPwd(!showPwd) }, showPwd ? react_1.default.createElement(Visibility_1.default, null) : react_1.default.createElement(VisibilityOff_1.default, null))),
                } })),
            react_1.default.createElement(Box_1.default, { sx: { my: 2, display: "flex", flexDirection: "column" } },
                react_1.default.createElement(FormControlLabel_1.default, { control: react_1.default.createElement(Checkbox_1.default, { checked: rememberMe, onChange: () => {
                            setRememberMe(!rememberMe);
                        } }), label: react_1.default.createElement(Typography_1.default, { variant: "bodySmall", fontWeight: "bold" }, checkBoxLabel) }),
                react_1.default.createElement(Box_1.default, { sx: { mt: 1, mb: 2 } }, forgotPassword && (react_1.default.createElement("a", { href: forgotPasswordUrl, style: { textDecoration: "none" } },
                    react_1.default.createElement(Typography_1.default, { variant: "bodySmall", fontWeight: "bold", color: "primary" }, forgotText))))),
            react_1.default.createElement(Button_1.default, { variant: "contained", color: "primary", fullWidth: true, disabled: disabled, size: "large", onClick: handleSubmit, sx: { mb: 1.5 } }, isPreAuthenticated ? (react_1.default.createElement("span", null, submitLabel)) : (react_1.default.createElement("span", null, nextLabel)))))) : null));
};
exports.default = SCFDoubleStepLogin;
