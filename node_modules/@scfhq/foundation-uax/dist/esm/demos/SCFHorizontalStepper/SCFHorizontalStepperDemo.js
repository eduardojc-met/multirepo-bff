import React, { useState } from "react";
import Typography from "@mui/material/Typography";
import { SCFHorizontalStepper, SCFDivider, SCFButton } from "../../components";
import { Step, StepLabel } from "@mui/material";
import { Box } from "@mui/system";
const SCFHorizontalStepperDemo = () => {
    const steps = ["Example A", "Example B", "Example C"];
    const [activeStep, setActiveStep] = useState(0);
    const [skipped, setSkipped] = useState(new Set());
    const isStepOptional = (step) => {
        return step === 1;
    };
    const isStepSkipped = (step) => {
        return skipped.has(step);
    };
    const handleNext = () => {
        let newSkipped = skipped;
        if (isStepSkipped(activeStep)) {
            newSkipped = new Set(newSkipped.values());
            newSkipped.delete(activeStep);
        }
        setActiveStep((prevActiveStep) => prevActiveStep + 1);
        setSkipped(newSkipped);
    };
    const handleBack = () => {
        setActiveStep((prevActiveStep) => prevActiveStep - 1);
    };
    const handleSkip = () => {
        if (!isStepOptional(activeStep)) {
            throw new Error("You can't skip a step that isn't optional.");
        }
        setActiveStep((prevActiveStep) => prevActiveStep + 1);
        setSkipped((prevSkipped) => {
            const newSkipped = new Set(prevSkipped.values());
            newSkipped.add(activeStep);
            return newSkipped;
        });
    };
    const handleReset = () => {
        setActiveStep(0);
    };
    return (React.createElement(React.Fragment, null,
        React.createElement(Typography, { variant: "h1", gutterBottom: true, fontWeight: "bold", sx: { mt: 8 } }, "Horizontal Stepper"),
        React.createElement(SCFDivider, { sx: { mb: 4 } }),
        React.createElement(Box, { sx: { width: "100%" } },
            React.createElement(SCFHorizontalStepper, { activeStep: activeStep }, steps.map((label, index) => {
                const stepProps = {};
                const labelProps = {};
                if (isStepOptional(index)) {
                    labelProps.optional = (React.createElement(Typography, { variant: "caption" }, "Optional"));
                }
                if (isStepSkipped(index)) {
                    stepProps.completed = false;
                }
                return (React.createElement(Step, { key: label, ...stepProps },
                    React.createElement(StepLabel, { ...labelProps }, label)));
            })),
            activeStep === steps.length ? (React.createElement(React.Fragment, null,
                React.createElement(Typography, { sx: { mt: 2, mb: 1 } }, "All steps completed - you're finished"),
                React.createElement(Box, { sx: { display: "flex", flexDirection: "row", pt: 2 } },
                    React.createElement(Box, { sx: { flex: "1 1 auto" } }),
                    React.createElement(SCFButton, { onClick: handleReset }, "Reset")))) : (React.createElement(React.Fragment, null,
                React.createElement(Typography, { sx: { mt: 2, mb: 1 } },
                    "Step ",
                    activeStep + 1),
                React.createElement(Box, { sx: { display: "flex", flexDirection: "row", pt: 2 } },
                    React.createElement(SCFButton, { color: "inherit", disabled: activeStep === 0, onClick: handleBack, sx: { mr: 1 } }, "Back"),
                    React.createElement(Box, { sx: { flex: "1 1 auto" } }),
                    isStepOptional(activeStep) && (React.createElement(SCFButton, { color: "inherit", onClick: handleSkip, sx: { mr: 1 } }, "Skip")),
                    React.createElement(SCFButton, { onClick: handleNext }, activeStep === steps.length - 1 ? "Finish" : "Next")))))));
};
export default SCFHorizontalStepperDemo;
