import React, { useState } from "react";
import Typography from "@mui/material/Typography";
import { SCFButton, SCFDatePicker, SCFDivider } from "../../components";
import { useForm } from "react-hook-form";
import Grid from "@mui/material/Grid";
const SCFDatePickerDemo = () => {
    const dateNow = new Date();
    dateNow.setMonth(dateNow.getMonth() - 1);
    const [dateFrom, setDateFrom] = useState(dateNow.toISOString().substring(0, 10));
    const [dateTo, setDateTo] = useState(dateNow.toISOString().substring(0, 10));
    const form = useForm();
    const { handleSubmit, getValues } = form;
    const date_diff_indays = (date1, date2) => {
        const dt1 = new Date(date1);
        const dt2 = new Date(date2);
        return Math.floor((Date.UTC(dt2.getFullYear(), dt2.getMonth(), dt2.getDate()) -
            Date.UTC(dt1.getFullYear(), dt1.getMonth(), dt1.getDate())) /
            (1000 * 60 * 60 * 24));
    };
    const rulesDateValidate = () => {
        const diff = date_diff_indays(dateFrom, dateTo);
        console.warn(diff);
        return diff >= 0 && diff <= 31;
    };
    const rulesDates = {
        validate: rulesDateValidate,
    };
    const onSubmit = () => {
        console.log(typeof "Hello world");
        console.log('GET VALUES');
        console.log(getValues(["idDateFrom", "idDateTo"]));
    };
    return (React.createElement(React.Fragment, null,
        React.createElement(Typography, { variant: "h1", gutterBottom: true, fontWeight: "bold", sx: { mt: 8 } }, "DatePicker"),
        React.createElement(SCFDivider, { sx: { mb: 4 } }),
        React.createElement(Grid, { container: true },
            React.createElement(Grid, { container: true, direction: "column", justifyContent: "start", alignItems: "center", spacing: 2, xs: 6 },
                React.createElement(Grid, { item: true },
                    React.createElement(Typography, { variant: "h5" }, "Basic DatePicker")),
                React.createElement(Grid, { item: true },
                    React.createElement(SCFDatePicker, null))),
            React.createElement(Grid, { container: true, direction: "column", justifyContent: "center", alignItems: "center", xs: 6, spacing: 4 },
                React.createElement(Grid, { item: true },
                    React.createElement(Typography, { variant: "h5" }, "Complex DatePicker with validation")),
                React.createElement(Grid, { item: true, container: true, spacing: 2, justifyContent: "center", alignItems: "center" },
                    React.createElement(Grid, { item: true, xs: 6 },
                        React.createElement(SCFDatePicker, { fullWidth: true, name: "idDateFrom", form: form, rules: rulesDates, variant: "outlined", type: "date", value: dateFrom, onChange: (e) => {
                                setDateFrom(e.target.value);
                                form.setValue("idDateFrom", e.target.value, {
                                    shouldValidate: form && form.formState && form.formState.isSubmitted,
                                });
                            }, label: "Date from label test", className: "medium" })),
                    React.createElement(Grid, { item: true, xs: 6 },
                        React.createElement(SCFDatePicker, { fullWidth: true, name: "idDateTo", form: form, rules: rulesDates, variant: "outlined", type: "date", value: dateTo, onChange: (e) => {
                                setDateTo(e.target.value);
                                form.setValue("idDateTo", e.target.value, {
                                    shouldValidate: form && form.formState && form.formState.isSubmitted,
                                });
                            }, label: "Date to label test", className: "medium" }))),
                React.createElement(Grid, { item: true },
                    React.createElement(SCFButton, { type: "submit", fullWidth: true, variant: "contained", onClick: handleSubmit(onSubmit) }, "Filter dates"))))));
};
export default SCFDatePickerDemo;
