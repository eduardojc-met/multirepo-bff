import { PaperProps } from "@mui/material";
import { FormEvent } from "react";
import { RegisterOptions } from "react-hook-form";
declare type ValidationMessages = {
    required: string;
    min: string;
    max: string;
    pattern: string;
};
interface DataType extends FormEvent<HTMLDivElement> {
    password: string;
    newPassword: string;
    newPasswordConfirm: string;
}
export declare type SCFChangePasswordFormProps = PaperProps & {
    /**
   * Set if component is rendered
   */
    show?: boolean;
    /**
     * set the component type, if the type is change, 3 inputs will be rendered (actual password,  new password and confirmation),
     * if the type is new, 2.
     */
    type: 'new' | 'change';
    onSubmit: (data: DataType) => void;
    maxWidth?: string;
    currentPassword?: string;
    currentPasswordLabel?: string;
    serverError?: boolean;
    serverErrorLabel?: string;
    newPasswordLabel?: string;
    newPasswordConfirmationLabel?: string;
    submitLabel?: string;
    currentPasswordError?: string;
    newPasswordConfirmationErrorLabel?: string;
    similarityValidation?: string;
    newPasswordValidationMessages?: ValidationMessages;
    /**
     * the similarity Ratio: password/newPassword if the similarity value is 1, is the same string
     */
    similarityRatio?: number;
    newPasswordValidation?: RegisterOptions;
};
export declare const SCFChangePasswordForm: {
    ({ show, type, onSubmit, maxWidth, currentPassword, currentPasswordLabel, serverError, serverErrorLabel, newPasswordLabel, newPasswordConfirmationLabel, submitLabel, currentPasswordError, newPasswordConfirmationErrorLabel, similarityValidation, similarityRatio, newPasswordValidationMessages, ...propsMaterial }: SCFChangePasswordFormProps): JSX.Element;
    defaultProps: {
        newPasswordValidationMessages: {
            required: string;
            min: string;
            max: string;
            pattern: string;
        };
    };
};
export {};
