import { Paper, Stack, Typography } from "@mui/material";
import React, { useEffect, useState } from "react";
import { useForm } from "react-hook-form";
import SCFAlert from "../SCFAlert/SCFAlert";
import SCFButton from "../SCFButton/SCFButton";
import SCFPassword from "../SCFPassword/SCFPassword";
;
export const SCFChangePasswordForm = ({ show = true, type = 'new', onSubmit, maxWidth = "340px", currentPassword = '', currentPasswordLabel = 'Current password', serverError = false, serverErrorLabel = 'Please, try another password', newPasswordLabel = 'New password', newPasswordConfirmationLabel = 'New password confirmation', submitLabel = 'Submit', currentPasswordError = 'Wrong password', newPasswordConfirmationErrorLabel = 'The password and its confirmation do not match', similarityValidation = 'The password and new password are too similar, please introduce another one', similarityRatio = 0.7, newPasswordValidationMessages, ...propsMaterial }) => {
    const [showChangePassword, setShowChangePassword] = useState(false);
    const { register, handleSubmit, formState: { errors }, trigger } = useForm({ mode: "onSubmit" });
    const [validateCurrentPassword, setValidateCurrentPassword] = useState(false);
    const [validateNewPassword, setValidateNewPassword] = useState(false);
    const [validateSimilarity, setValidateSimilarity] = useState(false);
    const stringSimilarity = require("string-similarity");
    const compareNewPassword = (data) => {
        if (data.newPassword === data.newPasswordConfirm) {
            onSubmit(data);
            setValidateNewPassword(false);
        }
        else {
            setValidateNewPassword(true);
        }
    };
    const handleRegistration = (data) => {
        if (showChangePassword) {
            if (currentPassword && currentPassword !== data.password) {
                setValidateCurrentPassword(true);
            }
            else {
                const similarity = stringSimilarity.compareTwoStrings(data.password, data.newPassword);
                setValidateCurrentPassword(false);
                if (similarity <= similarityRatio) {
                    setValidateSimilarity(false);
                    compareNewPassword(data);
                }
                else {
                    setValidateSimilarity(true);
                }
            }
        }
        else {
            compareNewPassword(data);
        }
    };
    useEffect(() => {
        if (Object.keys(errors).length !== 0) {
            trigger();
        }
    }, [newPasswordValidationMessages]);
    useEffect(() => {
        if (type === 'change') {
            setShowChangePassword(true);
        }
    }, [type]);
    const registerO = {
        required: newPasswordValidationMessages.required,
        minLength: {
            value: 8,
            message: newPasswordValidationMessages.min
        },
        maxLength: {
            value: 64,
            message: newPasswordValidationMessages.max
        },
        pattern: {
            value: /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[$@$!%*?&])[A-Za-z\d$@$!%*?&]/,
            message: newPasswordValidationMessages.pattern
        }
    };
    return (React.createElement(React.Fragment, null, show && (React.createElement(Paper, { sx: { p: 4, maxWidth: maxWidth }, ...propsMaterial },
        React.createElement("form", { onSubmit: handleSubmit(handleRegistration) },
            React.createElement(Stack, { spacing: 2, direction: "column" },
                showChangePassword && (React.createElement(React.Fragment, null,
                    React.createElement(SCFPassword, { name: "password", variant: 'standard', label: currentPasswordLabel, newPasswordValidation: { ...register('password', { required: newPasswordValidationMessages.required }) } }),
                    React.createElement(Typography, { variant: 'bodySmall', mb: 2, color: 'primary' }, errors?.password && errors.password.message))),
                React.createElement(SCFPassword, { newPasswordValidation: { ...register('newPassword', registerO) }, name: "newPassword", variant: 'standard', label: newPasswordLabel }),
                React.createElement(Typography, { variant: 'bodySmall', mb: 2, color: 'primary' }, errors?.newPassword && errors.newPassword.message),
                React.createElement(SCFPassword, { newPasswordValidation: { ...register('newPasswordConfirm', { required: newPasswordValidationMessages.required }) }, name: "newPasswordConfirm", variant: 'standard', label: newPasswordConfirmationLabel }),
                React.createElement(Typography, { variant: 'bodySmall', mb: 2, color: 'primary' }, errors?.newPasswordConfirm && errors.newPasswordConfirm.message),
                serverError && (React.createElement(SCFAlert, { severity: "error", children: serverErrorLabel })),
                validateCurrentPassword && (React.createElement(SCFAlert, { severity: "error", children: currentPasswordError })),
                validateNewPassword && (React.createElement(SCFAlert, { severity: "error", children: newPasswordConfirmationErrorLabel })),
                validateSimilarity && (React.createElement(SCFAlert, { severity: "error", children: similarityValidation })),
                React.createElement(SCFButton, { variant: 'contained', color: 'primary', type: "submit" }, submitLabel)))))));
};
SCFChangePasswordForm.defaultProps = {
    newPasswordValidationMessages: {
        required: 'Password is required',
        min: 'Password must have at least 8 characters',
        max: "Password can't be longer than 64 characters",
        pattern: 'The password must contains at least one uppercase one lowercase one number and one special case character'
    }
};
