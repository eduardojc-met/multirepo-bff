import React, { useEffect, useState } from "react";
import Typography from "@mui/material/Typography";
import Alert from "@mui/material/Alert";
import TextField from "@mui/material/TextField";
import Paper from "@mui/material/Paper";
import Checkbox from "@mui/material/Checkbox";
import FormControlLabel from "@mui/material/FormControlLabel";
import Button from "@mui/material/Button";
import Box from "@mui/material/Box";
import ArrowBackIcon from "@mui/icons-material/ArrowBack";
import PersonIcon from "@mui/icons-material/Person";
import VisibilityIcon from "@mui/icons-material/Visibility";
import VisibilityOffIcon from "@mui/icons-material/VisibilityOff";
const SCFDoubleStepLogin = ({ onLookup, onSubmit, forgotPasswordUrl, forgotPassword = false, loginError, show = true, maxWidth = "365px", emailInputLabel = "Email", passwordInputLabel = "Password", checkBoxLabel = "Remember me", loginErrorLabel = "Failed to sign in", loginTitle = "Welcome", loginSubtitle = "Log in to get started", forgotText = "Forgot your password?", nextLabel = "Next", submitLabel = "Submit", notEmailErrorLabel = "Please indicate a valid email", }) => {
    const [isPreAuthenticated, setIsPreAuthenticated] = useState(false);
    const [pwd, setPwd] = useState("");
    const [email, setEmail] = useState("");
    const [rememberMe, setRememberMe] = useState(false);
    const [notAnEmail, setNotAnEmail] = useState(false);
    const [disabled, setDisabled] = useState(true);
    const [showPwd, setShowPwd] = useState(false);
    const emailRegex = /^[-\w.%+]{1,64}@(?:[A-Z0-9-]{1,63}\.){1,125}[A-Z]{2,63}$/i;
    /**
     * Gestiona el envío del formulario cuando pulsamos enter o hacemos clic en el botón de envío
     * @param {*} e
     * @param {*} FormValues Es un diccionario con los valores del formulario
     */
    const handleKeypress = (e) => {
        if (e.key === "Enter") {
            handleSubmit();
        }
    };
    /**
     * Handle form submit
     */
    const handleSubmit = () => {
        if (emailRegex.test(email)) {
            if (isPreAuthenticated) {
                doSubmit(email, pwd, rememberMe);
            }
            else {
                doLookup(email);
            }
        }
    };
    /**
     * Return to first step
     */
    const handleBack = () => {
        setIsPreAuthenticated(false);
    };
    /**
     * Button state and error label control
     */
    useEffect(() => {
        setDisabled(!(email && emailRegex.test(email)));
        setNotAnEmail((email && !emailRegex.test(email)) === true); // prevent empty string error from regex expr.
    }, [email]);
    /**
     * Do the callback for the first check and go to second step if it's success
     * @param email
     */
    const doLookup = (email) => {
        setIsPreAuthenticated(onLookup(email));
    };
    /**
     * Do the callback for a regular login
     * @param email
     * @param pwd
     * @param rememberMe
     */
    const doSubmit = (email, pwd, rememberMe) => {
        onSubmit(email, pwd, rememberMe);
    };
    return (React.createElement(React.Fragment, null, show ? (React.createElement(Paper, { className: "loginComponent", sx: { p: 4, maxWidth: maxWidth } },
        React.createElement("form", { onSubmit: (e) => {
                e.preventDefault();
            } },
            React.createElement(Typography, { variant: "h2", mt: 0 }, loginTitle),
            React.createElement(Typography, { variant: "bodyMedium", mb: 2 }, loginSubtitle),
            loginError && React.createElement(Alert, { severity: "error" }, loginErrorLabel),
            isPreAuthenticated ? (React.createElement(Box, { sx: {
                    display: "flex",
                    justifyContent: "flex-start",
                    alignItems: "center",
                    mt: 3,
                } },
                React.createElement(ArrowBackIcon, { sx: { marginRight: 2, color: "primary", cursor: "pointer" }, onClick: handleBack }),
                React.createElement(Typography, { variant: "bodySmall", fontWeight: "bold" }, email))) : (React.createElement(React.Fragment, null,
                React.createElement(TextField, { fullWidth: true, id: "email", label: emailInputLabel, value: email, variant: "standard", onKeyPress: handleKeypress, onChange: (e) => {
                        setEmail(e.target.value);
                    }, InputProps: {
                        endAdornment: React.createElement(PersonIcon, null),
                    } }),
                notAnEmail && (React.createElement(Alert, { severity: "error" },
                    React.createElement("strong", null, notEmailErrorLabel))))),
            isPreAuthenticated && (React.createElement(TextField, { fullWidth: true, id: "field2", variant: "standard", value: pwd, onChange: (e) => {
                    setPwd(e.target.value);
                }, label: passwordInputLabel, type: showPwd ? "text" : "password", InputProps: {
                    endAdornment: (React.createElement("span", { onClick: () => setShowPwd(!showPwd) }, showPwd ? React.createElement(VisibilityIcon, null) : React.createElement(VisibilityOffIcon, null))),
                } })),
            React.createElement(Box, { sx: { my: 2, display: "flex", flexDirection: "column" } },
                React.createElement(FormControlLabel, { control: React.createElement(Checkbox, { checked: rememberMe, onChange: () => {
                            setRememberMe(!rememberMe);
                        } }), label: React.createElement(Typography, { variant: "bodySmall", fontWeight: "bold" }, checkBoxLabel) }),
                React.createElement(Box, { sx: { mt: 1, mb: 2 } }, forgotPassword && (React.createElement("a", { href: forgotPasswordUrl, style: { textDecoration: "none" } },
                    React.createElement(Typography, { variant: "bodySmall", fontWeight: "bold", color: "primary" }, forgotText))))),
            React.createElement(Button, { variant: "contained", color: "primary", fullWidth: true, disabled: disabled, size: "large", onClick: handleSubmit, sx: { mb: 1.5 } }, isPreAuthenticated ? (React.createElement("span", null, submitLabel)) : (React.createElement("span", null, nextLabel)))))) : null));
};
export default SCFDoubleStepLogin;
