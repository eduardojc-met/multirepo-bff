import React, { useEffect, useState } from "react";
import ReCAPTCHA from "react-google-recaptcha";
import Typography from "@mui/material/Typography";
import Alert from "@mui/material/Alert";
import TextField from "@mui/material/TextField";
import Paper from "@mui/material/Paper";
import Checkbox from "@mui/material/Checkbox";
import FormControlLabel from "@mui/material/FormControlLabel";
import Button from "@mui/material/Button";
import Box from "@mui/material/Box";
import PersonIcon from "@mui/icons-material/Person";
import VisibilityIcon from '@mui/icons-material/Visibility';
import VisibilityOffIcon from '@mui/icons-material/VisibilityOff';
import Link from "@mui/material/Link";
const SCFLogin = ({ onSubmit, forgotPassword = undefined, loginError, show = true, maxWidth = "365px", userInputLabel = "Username", passwordInputLabel = "Password", checkBoxLabel = "Remember me", loginErrorLabel = "Failed to sign in", loginTitle = "Welcome", loginSubtitle = "Log in to get started", forgotText = "Forgot your password?", submitLabel = "Submit", evaluateRecaptchaToken = undefined, /**
 * set if reCAPTCHA component is rendered or not
 */ recaptcha = false, 
/** siteKey es la key necesaria para la Api de google reCaptcha, y la apiUrl el token de back, son pasados por props,
 * para que cada proyecto las pase de forma dinámica. Son opcionales.
 */
apiUrl = ' ', siteKey = ' ', rememberMe = true }) => {
    const [pwd, setPwd] = useState("");
    const [user, setUser] = useState("");
    const [rememberMeOption, setRememberMeOption] = useState(false);
    const [disabled, setDisabled] = useState(true);
    const [showPwd, setShowPwd] = useState(false);
    const [noRobot, setNoRobot] = useState(false);
    const [captchaCheck, setCaptchaCheck] = useState(false);
    const [forgotPassordProps, setforgotPassordProps] = useState({});
    const getTokenEvaluation = (token) => {
        if (evaluateRecaptchaToken) {
            evaluateRecaptchaToken(token, apiUrl)
                .then(resp => {
                const captcha = resp.data;
                setNoRobot(captcha);
                setCaptchaCheck(true);
            });
        }
    };
    /**
     * Gestiona el envío del formulario cuando pulsamos enter o hacemos clic en el botón de envío
     * @param {*} e
     * @param {*} FormValues Es un diccionario con los valores del formulario
     */
    const handleKeypress = (e) => {
        if (e.key === "Enter") {
            handleSubmit();
        }
    };
    /**
     * Handle form submit
     */
    const handleSubmit = () => {
        doSubmit(user, pwd, rememberMeOption);
    };
    // const  handleCaptcha = (value:any) => getTokenEvaluation(value);
    const handleCaptchaWhenLogin = () => {
        if (recaptcha) {
            noRobot ? handleSubmit() : null;
        }
        else {
            handleSubmit();
        }
    };
    /**
     * Button state and error label control
     */
    useEffect(() => {
        if (recaptcha) {
            if (captchaCheck) {
                setDisabled(false);
                setDisabled(!user || !pwd);
            }
            else {
                setDisabled(true);
            }
        }
        else {
            setDisabled(!user || !pwd);
        }
    }, [user, pwd, captchaCheck]);
    /**
     * Do the callback for a regular login
     * @param user
     * @param pwd
     * @param rememberMe
     */
    const doSubmit = (user, pwd, rememberMe) => {
        onSubmit(user, pwd, rememberMe);
    };
    useEffect(() => {
        if (typeof forgotPassword === 'string') {
            setforgotPassordProps({ href: forgotPassword });
        }
        else {
            setforgotPassordProps({ href: '#', onClick: forgotPassword });
        }
    }, []);
    useEffect(() => {
        setRememberMeOption(rememberMe);
    }, []);
    return (React.createElement(React.Fragment, null, show ? (React.createElement(Paper, { className: "loginComponent", sx: { p: 4, maxWidth: maxWidth } },
        React.createElement("form", null,
            React.createElement(Typography, { variant: "h2", mt: 0 }, loginTitle),
            React.createElement(Typography, { variant: "bodyMedium", mb: 2 }, loginSubtitle),
            loginError && React.createElement(Alert, { severity: "error" }, loginErrorLabel),
            React.createElement(TextField, { fullWidth: true, id: "user", label: userInputLabel, value: user, variant: "standard", onKeyPress: handleKeypress, onChange: (e) => {
                    setUser(e.target.value);
                }, InputProps: {
                    endAdornment: React.createElement(PersonIcon, null),
                } }),
            React.createElement(TextField, { fullWidth: true, id: "field2", variant: "standard", value: pwd, onChange: (e) => {
                    setPwd(e.target.value);
                }, label: passwordInputLabel, type: showPwd ? "text" : "password", InputProps: {
                    endAdornment: (React.createElement("span", { onClick: () => setShowPwd(!showPwd) }, showPwd ? React.createElement(VisibilityIcon, null) : React.createElement(VisibilityOffIcon, null))),
                } }),
            React.createElement(Box, { sx: { my: 2, display: "flex", flexDirection: "column" } },
                rememberMe && (React.createElement(FormControlLabel, { control: React.createElement(Checkbox, { checked: rememberMeOption, onChange: () => {
                            setRememberMeOption(!rememberMeOption);
                        } }), label: React.createElement(Typography, { variant: "bodySmall", fontWeight: "bold" }, checkBoxLabel) })),
                forgotPassword && (React.createElement(Box, { sx: { mt: 1, mb: 2 } },
                    React.createElement(Link, { ...forgotPassordProps, style: { textDecoration: "none" } },
                        React.createElement(Typography, { variant: "bodySmall", fontWeight: "bold", color: "primary" }, forgotText))))),
            React.createElement(Box, { sx: { display: "flex", justifyContent: "center", mt: 1, mb: 2 } },
                React.createElement(Button, { variant: "contained", color: "primary", fullWidth: true, disabled: disabled, size: "large", onClick: handleCaptchaWhenLogin },
                    React.createElement("span", null, submitLabel))),
            recaptcha && evaluateRecaptchaToken &&
                React.createElement(Box, { sx: { display: "flex", justifyContent: "center", pt: 2, mb: 1.5 } },
                    React.createElement(ReCAPTCHA, { sitekey: siteKey, onChange: getTokenEvaluation }))))) : null));
};
export default SCFLogin;
