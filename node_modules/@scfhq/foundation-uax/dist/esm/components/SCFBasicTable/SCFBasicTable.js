import React, { useEffect, useState } from "react";
import Table from "@mui/material/Table";
import TableBody from "@mui/material/TableBody";
import TableCell from "@mui/material/TableCell";
import TableContainer from "@mui/material/TableContainer";
import TablePagination from "@mui/material/TablePagination";
import TableHead from "@mui/material/TableHead";
import TableRow from "@mui/material/TableRow";
import Paper from "@mui/material/Paper";
import EditIcon from "@mui/icons-material/Edit";
import DeleteIcon from "@mui/icons-material/Delete";
import { Box } from "@mui/system";
import { StyledTableCell } from "./BasicTableStyle";
import Typography from "@mui/material/Typography";
import IconButton from "@mui/material/IconButton";
import VisibilityIcon from "@mui/icons-material/Visibility";
import PowerSettingsNewIcon from "@mui/icons-material/PowerSettingsNew";
import AddCircleIcon from "@mui/icons-material/AddCircle";
import Chip from "@mui/material/Chip";
export const SCFBasicTable = ({ show = true, arrayHeader, arrayBody, width = "100%", tableTitle = "Table title", actionLabel = "Action", stickyHeader = true, handleActive = undefined, handleDetails = undefined, handleDelete = undefined, handleEdit = undefined, handleAdd = undefined, add = true, labelRowsPerPage = 'PÃ¡ginas', ...muiprops }) => {
    const [page, setPage] = useState(0);
    const [rowsPerPage, setRowsPerPage] = useState(4);
    const handleChangePage = (event, newPage) => {
        event.preventDefault();
        setPage(newPage);
    };
    const handleChangeRowsPerPage = (event) => {
        setRowsPerPage(+event.target.value);
        setPage(0);
    };
    useEffect(() => {
        setPage(0);
    }, [arrayBody]);
    return (React.createElement(React.Fragment, null, show && (React.createElement(Paper, { ...muiprops },
        React.createElement(Box, { sx: {
                display: "flex",
                justifyContent: "space-between",
                alignItems: "center",
                alignContent: "center",
                padding: "12px",
                backgroundColor: "white",
            } },
            React.createElement(Typography, { variant: "h4" },
                " ",
                tableTitle),
            add &&
                (React.createElement(IconButton, { onClick: handleAdd },
                    React.createElement(AddCircleIcon, { color: "primary", sx: { fontSize: 40 } })))),
        React.createElement(TableContainer, { sx: { maxHeight: 400 } },
            React.createElement(Table, { stickyHeader: true, sx: { minWidth: 700 }, "aria-label": "customized table, sticky table", width: width, ...muiprops },
                React.createElement(TableHead, null,
                    React.createElement(TableRow, null, arrayHeader.map((name, index) => {
                        return (React.createElement(StyledTableCell, { key: index }, name));
                    }))),
                React.createElement(TableBody, null, arrayBody
                    .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)
                    .map((row, index) => {
                    const arrayActions = row && row?.actions;
                    const details = arrayActions && arrayActions.includes('details');
                    const editable = arrayActions && arrayActions.includes('editable');
                    const reactive = arrayActions && arrayActions.includes('reactive');
                    const deletable = arrayActions && arrayActions.includes('deletable');
                    return (React.createElement(TableRow, { key: index },
                        Object.entries(row).map(([key, value], index) => {
                            const active = key === "status" && value && value === 'A';
                            const inactive = key === "status" && value && value === 'I';
                            const inAction = Array.isArray(value);
                            const isStatus = key === "status" && (value === 'I' || value === 'A') ? true : false;
                            return (React.createElement(React.Fragment, null, !inAction &&
                                React.createElement(TableCell, { sx: { textAlign: "center" }, key: `${index}_${key}` },
                                    active &&
                                        React.createElement(Chip, { label: "Active", sx: {
                                                border: "1px solid #63ba68",
                                                backgroundColor: "#E0F2E1",
                                            } }),
                                    inactive &&
                                        React.createElement(Chip, { label: "Inactive", sx: {
                                                border: "1px solid #cc0000",
                                                backgroundColor: "#FCCCCC",
                                            } }),
                                    !inAction && !isStatus &&
                                        React.createElement("span", { style: { textAlign: "center" } }, value))));
                        }),
                        React.createElement(TableCell, { sx: { textAlign: "center" }, key: index },
                            details && (React.createElement(IconButton, { onClick: handleDetails
                                    ? () => {
                                        handleDetails(row);
                                    }
                                    : undefined },
                                React.createElement(VisibilityIcon, null))),
                            editable && (React.createElement(IconButton, { onClick: handleEdit
                                    ? () => {
                                        handleEdit(row);
                                    }
                                    : undefined },
                                React.createElement(EditIcon, null))),
                            deletable && (React.createElement(IconButton, { onClick: handleDelete
                                    ? () => {
                                        handleDelete(row);
                                    }
                                    : undefined },
                                React.createElement(DeleteIcon, null))),
                            reactive && (React.createElement(IconButton, { onClick: handleActive
                                    ? () => {
                                        handleActive(row);
                                    }
                                    : undefined },
                                React.createElement(PowerSettingsNewIcon, null))))));
                })))),
        React.createElement(TablePagination, { rowsPerPageOptions: [4, 5, 10, 25, 100], component: "div", count: arrayBody.length, rowsPerPage: rowsPerPage, page: page, onPageChange: handleChangePage, labelRowsPerPage: labelRowsPerPage, onRowsPerPageChange: handleChangeRowsPerPage, sx: { position: "sticky" } })))));
};
export default SCFBasicTable;
