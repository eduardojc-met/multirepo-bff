import * as React from 'react';
import MuiDrawer from '@mui/material/Drawer';
import List from '@mui/material/List';
import ListItemText from '@mui/material/ListItemText';
import ListItemButton from '@mui/material/ListItemButton';
import ExpandLess from '@mui/icons-material/ExpandLess';
import ExpandMore from '@mui/icons-material/ExpandMore';
import Collapse from '@mui/material/Collapse';
import { styled } from '@mui/material/styles';
import { arrayMenuData } from './CustomMiniDrawerData';
import { SCFCustomIcon } from '../SCFCustomIcon/SCFCustomIcon';
const drawerWidth = 'auto';
;
const openedMixin = (theme) => ({
    width: drawerWidth,
    transition: theme.transitions.create('width', {
        easing: theme.transitions.easing.sharp,
        duration: theme.transitions.duration.enteringScreen,
    }),
    overflowX: 'hidden',
});
const closedMixin = (theme) => ({
    transition: theme.transitions.create('width', {
        easing: theme.transitions.easing.sharp,
        duration: theme.transitions.duration.leavingScreen,
    }),
    overflowX: 'hidden',
    width: `calc(${theme.spacing(7)} + 1px)`,
    [theme.breakpoints.up('sm')]: {
        width: `calc(${theme.spacing(8)} + 1px)`,
    },
});
const Drawer = styled(MuiDrawer, { shouldForwardProp: (prop) => prop !== 'open' })(({ theme, open }) => ({
    width: drawerWidth,
    flexShrink: 0,
    whiteSpace: 'nowrap',
    boxSizing: 'border-box',
    ...(open && {
        ...openedMixin(theme),
        '& .MuiDrawer-paper': openedMixin(theme),
    }),
    ...(!open && {
        ...closedMixin(theme),
        '& .MuiDrawer-paper': closedMixin(theme),
    }),
}));
export const SCFCustomMiniDrawer = ({ show = true, arrayMenu = arrayMenuData, open = true, listItemClass = 'listItemClass', isAuthenticated = false, handleSubOpen, openSub = true, selected, handleOpen, handleRoutes }) => {
    return (React.createElement(React.Fragment, null, show &&
        React.createElement("div", { style: isAuthenticated ? { display: 'block' } : { display: 'none' } },
            React.createElement(Drawer, { variant: "permanent", open: open, transitionDuration: 1 },
                React.createElement(List, null, arrayMenu.map((menu, indexMenu) => (React.createElement("div", { key: indexMenu }, menu && menu.subNav ?
                    React.createElement("div", { key: indexMenu },
                        open ?
                            React.createElement(ListItemButton, { key: indexMenu, className: listItemClass, onClick: () => { handleSubOpen(); }, style: !selected ? { borderLeft: '4px solid red' } : { border: '0px solid ' } },
                                React.createElement(SCFCustomIcon, { iconPath: menu.icon, color: !selected ? 'red' : 'black' }),
                                React.createElement(ListItemText, { primary: menu.title, style: !selected ? { color: 'red' } : { color: 'black' } }),
                                openSub ? React.createElement(ExpandLess, null) : React.createElement(ExpandMore, null))
                            :
                                React.createElement(ListItemButton, { key: indexMenu, className: listItemClass },
                                    React.createElement(SCFCustomIcon, { iconPath: menu.icon, onClick: () => { handleOpen(); } })),
                        React.createElement(Collapse, { in: openSub, timeout: "auto", unmountOnExit: true },
                            React.createElement(List, { component: "div", disablePadding: true }, menu.subNav.map((subMenu, indexSubMenu) => (React.createElement(ListItemButton, { key: indexSubMenu, sx: { pl: 4 } },
                                React.createElement("div", { style: { width: '24px' } }),
                                React.createElement(ListItemText, { onClick: () => { handleRoutes(subMenu.path); }, primary: subMenu.title, style: open ? { opacity: 1 } : { display: 'none' } }))))))) :
                    React.createElement("div", { key: indexMenu }, open ?
                        React.createElement(ListItemButton, { key: indexMenu, className: listItemClass, onClick: () => { handleSubOpen(); }, style: !selected ? { borderLeft: '4px solid red' } : { border: '0px solid ' } },
                            React.createElement(SCFCustomIcon, { iconPath: menu.icon, color: !selected ? 'red' : 'black' }),
                            React.createElement(ListItemText, { primary: menu.title, onClick: () => { handleRoutes(menu.path); }, style: !selected ? { color: 'red' } : { color: 'black' } }))
                        :
                            React.createElement(ListItemButton, { key: indexMenu, className: listItemClass },
                                React.createElement(SCFCustomIcon, { iconPath: menu.icon, onClick: () => { handleOpen(); } })))))))))));
};
