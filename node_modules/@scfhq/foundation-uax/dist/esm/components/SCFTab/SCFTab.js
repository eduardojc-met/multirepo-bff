import React from "react";
import Tab from "@mui/material/Tab";
import Tabs from "@mui/material/Tabs";
import { Box } from "@mui/material";
import Typography from "@mui/material/Typography";
export const TabPanel = (props) => {
    const { children, value, index, ...other } = props;
    return (React.createElement("div", { role: "tabpanel", hidden: value !== index, id: `scrollable-auto-tabpanel-${index}`, "aria-labelledby": `scrollable-auto-tab-${index}`, ...other }, value === index && (React.createElement(Box, { sx: { p: 3 } },
        React.createElement(Typography, null, children)))));
};
export const a11yProps = (index) => {
    return {
        id: `scrollable-auto-tab-${index}`,
        "aria-controls": `scrollable-auto-tabpanel-${index}`,
    };
};
const SCFTab = ({ show = true, textColor = "inherit", indicatorColor = "primary", pages = [{ title: "Tab1", content: "Tab 1 content" }, { title: "Tab2", content: "Tab 2 content" }], }) => {
    const [value, setValue] = React.useState(0);
    const handleChange = (event, newValue) => {
        console.warn(event); // TODO solucionar para quitar
        setValue(newValue);
    };
    return (React.createElement(React.Fragment, null, show && (React.createElement(React.Fragment, null,
        React.createElement(Box, { sx: { borderBottom: 1, borderColor: 'divider' } },
            React.createElement(Tabs, { onChange: handleChange, textColor: textColor, indicatorColor: indicatorColor, value: value }, pages.map((tabconfig, index) => {
                return React.createElement(Tab, { key: index, label: tabconfig.title, ...a11yProps(index) });
            }))),
        pages.map((tabconfig, index) => {
            return (React.createElement(TabPanel, { key: index, value: value, index: index }, tabconfig.content));
        })))));
};
export default SCFTab;
